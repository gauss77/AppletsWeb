<!-- 

    Copyright (C)  2010  SebastiÃ¡n Gurin.
    Permission is granted to copy, distribute and/or modify this document
    under the terms of the GNU Free Documentation License, Version 1.3
    or any later version published by the Free Software Foundation;
    with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
    A copy of the license is included in the section entitled "GNU
    Free Documentation License".

@author: sgurin 

-->

<chapter id="chap-getting-started">


<!--<chapterinfo>-->
<!--<edition>Introduction to Java2Script</edition>-->
<!--<keywordset>-->
<!--  <keyword>Getting started with j2s</keyword>-->
<!--  <keyword>Creating a Java2Script web application</keyword>-->
<!--</keywordset>-->
<!--<edition>Getting started with Java2Script</edition>-->
<!--</chapterinfo>-->


  <title>Getting Started</title>
  
  
  <epigraph>
<attribution>Lao Tzu </attribution>
<para>
"Anticipate the difficult by managing the easy"
</para>
</epigraph>
  
  <para>In this chapter we will build our firsts web aplications using java2script .... TODO</para>
  
  <section id="sec-simple-j2s-app"><title>A simple Java2Script application</title>
   
   <para>As with any Java application, the first thing is to create an Eclipse project. But instead of creating a common Java application project, we will create a 
   <code>Java2script application project</code>. To do so, go to menu <code>File -&gt; New... -&gt; Other...</code> and in the dialog select <code>
   Java2Script Project</code>:</para>
   
    <figure>
      <title>Creating a new Java2Script application project</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/using-j2s-02.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure> 
   
   <para>The following steps for finishing creating the Java2Script project are equal to Java project's. Just enter a valid project name and click next/finnish. 
   Congratulations you have created your first Java2Script project!</para>   
      
   <note><para>Java2Script projects are just like common Java projects, but with the Java to JavaScript compiler enabled. This means that
    your .java files will also be compiled to JavaScript. So the application can be executed inside an HTML document as we will see below.
    By the way, the generated JavaScript codes will be at the same location as generated .class files, by default at
    <filename>YOU_PROJECT/bin</filename> folder. </para></note>
    
        
    
    <para>Now, we will create a simple Java hello world program and see how easily can be executed in an HTML document. First create a Java package like
    <code>my.first.project</code> and add a Java class named <code>HelloWorld</code> inside it with the following code:</para>
    
    <programlisting>
package my.first.project;

public class HelloWorld {

	public static void main(String[] args) {
		System.out.println("hello world");
	}

}
    </programlisting>
    
    <para>Save the file with <code>CTRL + S</code>. Now we will execute the <code>HelloWorld</code> class as a Java2Script application. An HTML 
    document named <filename>my.first.project.HelloWorld.html</filename> will be created that launch our little Java application. 
    You can launch your Java2Script application in the same way you launch a normal Java application: right click you Java code <code>-&gt; Run As -&gt;
    Java2Script Application</code>: </para>
   
   <figure>
      <title>Launch a Java2Script application</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/using-j2s-03.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>
    
    <para>When you run a Java class as a Java2Script Application, the J2S console Eclipse view will be opened and it will show an HTML document which will execute your 
    Java application. This view is a simple browser and in fact you can also open the generated HTML document with your favourite browser: </para>
    
    <figure>
      <title>Launch a Java2Script application - the J2S Console view</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/using-j2s-04.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>
    
    <para>Congratulations, you have just executed your first Java2Script application! As you can see, java2script simulate the <code>System.out.println</code> 
    method call pending a paragraph with text to the html document. Another thing to notice, is that if you refresh your project, you will see a new 
    html file at the root </para>    
    
    <tip>
    <para>Remember, if you just make a change in a .java file and save the file, the J2S compiler will regenerate the 
    javascript code and you only need to refresh the HTML document in the browser. 
    If you only change a .java file, you don't need to run as.. the application again, only refresh the document 
    in the browser. Try it, copy the url of the html document from the J2S console, and paste it in your stem browser. 
    Then change the System.out string in HelloWorld.java file and save it. Now refresh the browser and you should see the change reflected. </para>
    </tip>    
    
   </section>
   
   
   
   
   
   
   
   
   
   <section id="configuring-j2s-app-launcher"><title>Configuring your Java2Script application launcher.</title>
   
   <para>A very important part of Java2Script plugin is the application launcher configuration. By default, Java2Script applications will be 
   launched from local filesystem and will point to the <filename>j2slib.js</filename> file that is inside your eclipse's <filename>plugins/</filename> directory. 
   </para>
   <para>When you run your application the first time, a Java2Script application launcher configuration is created. For editing it, you just rught click on you java 
   file -&gt; Run Configgurations... As you may see, there are two new tabs in the application launcher configuration. </para>
   
   <para>The first tab, <code>HTML</code>, is used to introduce html code at the <code>&lt;head&gt;</code> or <code>&lt;body&gt;</code> html elements of the generated html 
   document, like scripts, CSS stylesheets, etc. We will call this tab the <quote>HTML configuration tab</quote>: </para>
   
    <figure>
      <title>Launch a Java2Script application - the J2S Console view</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/configuring-j2s-apps-01.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>
    
    <para>The <code>Miscellaneous</code> tab is used to specify, among other things, the location of the <filename>j2slib.js</filename> file, 
    the location of generated <filename>.js</filename> files (the <filename>bin/</filename> folder URL), firefox addon support, etc: </para>
    
    <figure>
      <title>Launch a Java2Script application - the J2S Console view</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/configuring-j2s-apps-02.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>
   
   <para>The most important item to configure here is the location of <filename>j2slib.js</filename> file. By default, Java2Script are launched pointing to 
   <filename>plugins/</filename> internal <filename>j2slib.js</filename> filesystem version, for example :</para>
   <programlisting>
   &lt;script type="text/javascript" src="../../j2s_3.6_workspace/net.sf.j2s.lib/j2slib/j2slib.z.js"&gt;
   </programlisting>
   
   <para>This is aceptable for developing because the Java2Script application will be loaded fast from filesystem. Nevertheless, you should change this if
   you want to deploy your application to a web server. A common practice is to copy your <filename>eclipse classic helios/plugins/net.sf.j2s.lib_2.0.0/j2slib/</filename>
   folder inside your Java2Script project and configure the application launcher to use a Global .js URL for your j2slib base: </para>
   
    <figure>
      <title>Launch a Java2Script application - the J2S Console view</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/configuring-j2s-apps-03.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>
   
   </section>
   
   
   
   

</chapter>
