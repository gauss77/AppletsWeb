<!-- 

    Copyright (C)  2010  SebastiÃ¡n Gurin.
    Permission is granted to copy, distribute and/or modify this document
    under the terms of the GNU Free Documentation License, Version 1.3
    or any later version published by the Free Software Foundation;
    with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
    A copy of the license is included in the section entitled "GNU
    Free Documentation License".

@author: sgurin 

-->

<chapter id="chap-intro">

  <title>Introduction</title>
  
  <epigraph>
<attribution>Frank Herbert - Dune</attribution>
<para>
Some actions have an end but no beginning; some begin but do not end. It all depends upon where the observer is standing.
</para>
</epigraph>




  
  <para>This document is for Java programmers who want to start
    programming web applications in Java programming language using Java to JavaScript
  compiler <ulink url="http://j2s.sourceforge.net/">Java2Script</ulink>. </para> 
    <para>We assume that the user is familiarized with the Java programming language. </para>



  <section id="sec-what-is-java2script">
    <title>What is Java2Script?</title>

<para>TODO: unify and simplfy all content of this section</para>


      <para>Java2Script is an Eclipse plugin that helps you write your web
    applications in Java. This means that your Java codes will be automatically
    translated into JavaScript which can be executed in a web page. With Java2Script you can transform your 
    java application in a pure javascript application, reusing your java codes in your Rich Internet Applications (RIA),
    and most of all being able of developing your RIA 100% in java code just like if you were developing another java project.</para>
    
<!--    <para>Java2script is an Eclipse plugin that translates your Java codes into JavaScript-->
<!--      Java2Script let you translate .java files to javascript and provide easy ways of calling the java-->
<!--      translated code from javascript so the translated application can be executed in a browser.</para>-->

   
<!--      <para>Java2script is an Eclipse plugin that translates your Java codes into JavaScript.-->
<!--    Basically, each .java file will be translated to a .js file, at the same time the .class -->
<!--    files are built. The syntax translation, as we will see, is straight forward and -->
<!--    clean. And it allows easily calling Java codes, for example, a main method of some class,-->
<!--    from JavaScript in an HTML document.</para>-->
    
     <para>As you would know, in a common java application this is what happen: First the .java files need to be compiled
      by the java compiler into .class files. Only then you can execute your program: calling the "java"
      command the java virtual machine will load and execute the .class files. </para>    
    
    <para>As we will see, in a Java2Script application something similar happens. First we need the
      java2script translator to translate out .java files to .js files and only then we are ready to
      load and execute the program from javascript in a browser. </para>      
    <para>A general diagram showing the roles of the Java2Script framework compared with the Java development kit
    is shown in the followign figure:</para>
    
        <figure>
      <title>Comparing Java2Script and Java JDK roles</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/j2s-compiler-role.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>
    
    
        <para>For all of this, Java2Script provides with the following components:</para>
        
    <itemizedlist>

      <listitem>
        <formalpara>
          <title>A java to javascript code translator (compiler)</title>
          <para>
            that translates each .java in a java source folder to a .js file, just like the java compiler
            javac translate .java files into .class files. </para>
        </formalpara>
      </listitem>

      <listitem>
        <formalpara>
          <title>Java language and java runtime emulation</title>
          <para>Javascript support for loading and executing generated JavaScript in the browser, including java language emulation utilities such as
            ClassLoader that will lazily load JavaScript code as required, Object Oriented Programming emulation, etc</para>
        </formalpara>
      </listitem>
      
          <listitem><formalpara><title>Java core utilities</title><para> An implementation of Java SE SDK library
      is translated, by the Java2Script compiler, to JavaScript. It is available to the Java programmer 
      in HTML document. Currently <ulink url="http://harmony.apache.org/">Apache Harmony</ulink> Java SE SDK 
      implementation is used. </para></formalpara></listitem> 

    </itemizedlist>
    
    
    
    <para>The following shows a more general architectonic idea involving all the components in developing Java2Script applications.</para>
  <figure>
      <title>Java2Script architecture diagram</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/j2s-arch-img1.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>
    
    
    <para>For "running" our java programs in a browser, Java2Script also supports a java language 
    emuilation library, letting as easyly configure, load and execute 
    our java translated code inside an html document from javascript.</para>
    
<!--      <para>Only one JavaScript file, j2slib.js is required to be included by the programmer -->
<!--    in the HTML document. j2slib.z.js, which size is 85kb, contains helper utilities for the Java -->
<!--    language support in JavaScript, like a JavaScript class loader -->
<!--    implementation and some essential Java classes in package <code>java.lang</code>. </para>-->
<!--    -->
<!--    <para>When running a Java compilation unit as a J2S application, Java2Script generates-->
<!--    a sample HTML document that invokes your Java target class' -->
<!--    <code>main()</code> method. In the execution all occurs in the client side.-->
<!--    There is no need for a server for the Java translated code to be executed: it is all JavaScript. </para>-->

<!--    <para>The main components of Java2Script Eclipse plugin are:</para>-->
    
<!--    <orderedlist>-->    
<!--      <listitem><formalpara><title>a Java to JavaScript code compiler</title><para>This Java to JavaScript compiler, It is based on -->
<!--      the Eclipse JDT. And it supports syntax of all Java versions.</para></formalpara></listitem>-->
<!--      -->
<!--      <listitem><formalpara><title>javj2slib/j2slib.z.js</title><para>A required JavaScript file that the HTML -->
<!--      document must include for being able to call Java translated code. Contains Java language support -->
<!--      utilities for JavaScript and some base Java classes in java.lang</para></formalpara></listitem>   -->
<!--    </orderedlist>-->
    
    <para>Also, Java2Script comes with known java libraries like (TODO links) SWT, JUnit and 
    other Java tools translated to JavaScript by Java2Script compiler. All this translated-tools are 
    inside the j2slib folder and are lazily loaded by the J2S class loader when needed by J2S applications. 
    These componenets are:</para>
    
     <orderedlist>
     
      <listitem><formalpara><title><ulink url="http://eclipse.org/swt">SWT</ulink></title><para>SWT version 3 support is 
      available! You can develop your rich internet application without having to learn another
       GUI toolkit API. More, you can develop applications which can be distributed for both
       desktop (Java+SWT) and internet!
      </para></formalpara></listitem>    
      
    <listitem><formalpara><title>ajax - simple RPC support.</title><para>Aiming to help Java
    developers balancing and debugging *local* and *remote* procedure calls for AJAX 
    RIAs without knowledge of serialization and deserialization. 
    TODO: http://blog.java2script.org/2006/10/12/java2script-introduces-simple-rpc/
      </para></formalpara></listitem>    
      
      <listitem><formalpara><title><ulink url="http://www.junit.org/">JUnit</ulink></title>
      <para>So you do not need to learn or develop another testing framework.
      </para></formalpara></listitem>   
      
    <listitem><formalpara><title><ulink url="http://developer.yahoo.com/yui/">YUI</ulink> and others</title>
        <para>The fact is Java2Script make it easy to port existing Java frameworks to JavaScript and vice versa.
        With a little more imagination, you can port existing JavaScript frameworks, 
        like <ulink url="http://developer.yahoo.com/yui/">YUI</ulink>, to Java. That is just the mission of 
        the project <ulink url="http://yui4java.sourceforge.net">yui4java</ulink> that among other things contain tools
        that easily let the Java programmer to access JavaScript language constructions and Java API for 
        <ulink url="http://developer.yahoo.com/yui/">YUI</ulink> version 2 and 3 and other known JavaScript toolkits.
      </para></formalpara></listitem>   
    
    </orderedlist>
    
 <note>   <para>At this point, it is important to understand that the only mandatory componenets of Java2Script are the first two, 
    the Java to JavaScript compiler and the java language and runtime emulation. All others are optional or replacable by other 
    implementations. For example, as we said, the implemenation for  java.lang, java.util java standar library is apache harmony but could be easily replaceable
    by other implementation because 99% of the java standard library provided by Java2Script is javascript code generated 
    with Java2Script compiler and is for this that we say that the compiler is a principal component of Java2Script.</para></note>
    

  </section>
  
  
  
  
  
  
   <section id="sect-demos" ><title>Demonstrations</title>
    
      <para>Enough talking, here are some interesting web applications made 100% in Java using Java2Script:</para>
      <orderedlist>
    
      <listitem><formalpara><title>
      <ulink url="http://demo.java2script.org/gtalk/">Google Talk Client in Java2Script</ulink></title>
      <para><ulink url="http://demo.java2script.org/gtalk/">Google Talk Client in Java2Script</ulink> is a pure JavaScript copy of Google Talk Client from non-Google communities. It is first implemented 
      in Java language using Eclipse SWT and Smack (A library for Jabber's XMPP). Then the client is converted to 
      JavaScript with servlet supports. And then it's deployed on a Tomcat server. As Java being platform-independent, 
      and JavaScript is browser-independent, this Google Talk client runs in any modern browsers, such as Firefox, Opera, 
      and Internet Explorer (IE), on Windows, Linux, Mac and others OS platforms. For more details or architectural information, 
      please visit blog "Inside Java2Script".</para></formalpara></listitem>
      
      <listitem><formalpara><title>
      <ulink url="http://demo.java2script.org/mail/">WeMail Web Mail Client</ulink></title>
      <para><ulink url="http://demo.java2script.org/mail/">WeMail Web Mail Client</ulink> is a free web mail client for Google Mail, Hotmail/Live Mail, Yahoo! Mail, AOL/AIM Mail and other mail 
      providers that support POP/IMAP &amp; SMTP. In case these mail services are blocked by your network firewall in office, 
      you still can access to your mails by using WeMail. WeMail is designed to be used anywhere, Windows/Linux PC, Mac, 
      home or office behind firewall. WeMail uses similar Gmail UI, so those Gmail users should feel much comfortable. 
      WeBuzz.IM team is dedicating to build web mail client services with better security, accessibility and user experience.
      </para></formalpara></listitem>
      
      <listitem><formalpara><title>
      <ulink url="http://demo.java2script.org/controls/">SWT Control Examples</ulink></title>
      <para> <ulink url="http://demo.java2script.org/controls/">SWT Control Examples</ulink> contain tests for common SWT widgets. You can download the 
      <ulink url="http://prdownloads.sourceforge.net/j2s/swt-control-examples-1.0.0.zip?download">swt-control-examples-1.0.0.zip</ulink>, 
      unzip it and view the example locally.
      </para></formalpara></listitem>
      
      
      <listitem><formalpara><title>
      <ulink url="http://java2script.org/">Java2Script demo web applications</ulink></title>
      <para><ulink url="http://java2script.org/">Java2Script demo web applications</ulink> contains some of SWT based mentioned
      demo applications and more, like MSN, Facebook, ICQ, AOL, Yahoo, Jabber, tetris game and other demo applications made with java2script. 
      It shows how several SWT based applications can be presented in one web page.
      </para></formalpara></listitem>    
      
      
      <listitem><formalpara><title>
      <ulink url="http://yui4java.sourceforge.net/yui/ImageViewerFrame.html">Advanced Image Viewer</ulink></title>
      <para> <ulink url="http://yui4java.sourceforge.net/yui/ImageViewerFrame.html">Advanced Image Viewer</ulink> let you load, view and manipulate your images online. Several image operations are supported, 
      like rotation, zoom, alpha, import/export and advance image filters like blur, emboss, high/low pass filters, edge detection 
      filters and general image convolution based filters are available. This project is a work in progress. For those users 
      who need advanced manipulation technics and filters for online image viewing. 100% client side. Unlike the other java2script projects, 
      it uses YUI instead of SWT for the GUI. And it also uses raphaeljs frameworks, which is ported to Java thanks to <ulink url="http://yui4java.sourceforge.net">yui4java</ulink> project.
      </para></formalpara></listitem>     
      
    </orderedlist>
    
    </section>
    
    
    
    
    
    

    <section id="comparing-j2s-with-similar-techs"><title>Comparing Java2Script to other similar technologies</title>
  <para>TODO: do not know if this section goes here... TODO write this better.</para>
  <para>If you are already familiar with other framework that let you write web pages in java, like GWT
  <footnote><para><ulink url="http://code.google.com/webtoolkit/">Google Web Toolkit</ulink></para></footnote>
  , you may wonder what are the main differences and similarities of those with Java2Script</para>
  
      <para>When Java2Script is compared to other technologiess like GWT, RAP and
      other more server side oriented technologies.</para>
      
      
      
    <programlisting>
* it can't be run outside Eclipse, 

* it makes a direct compilation from .java to .js file. Concepts like compilation unit, class, classloader are
available

* it has a lazy Java class loader 
   
* it let you write your native
javascript code easily section: the run as dialog: todo. show picture
TODO: explain the porpuse of each item 

* use unchecked "Use global j2slib"
only for development. If you want to put your j2slib application in a web
server, you must indicate questions: ÃÂ¿is there an official j2slib
published version on some url, so user can use in his/her web
applications without having to have/upload their own j2slib
folder?



other comments about j2s vs gwt of mine (not sure of its accuracy):


about gwt vs java2script, I think they are similar tools. IMHO de big desition in this kind of projects is Â¿how much I have to restrict the java programmer so the resulting javascript code size is acceptable? What I've seen of gwt is that its resulting javascript code size is lower than in java2script. But this is because:

* the translate .java into a very compressed (and ofuscated) javascript code while java2script do an straight and clear translation of .java to .js

* there are restrictions about java.lang and java.util compared to java2script

* only java 1.4 syntax is supported by gwt while in java2script all java syntax versions are supported. - (not so true now!)

* as a result it is easier of porting existing java code and toolkits to javascript with java2script

* java2script provides with metodologies that easily allow to port existing javascript toolkits to java like yui4java

* it is nicely integrated to eclipse IDE: it is very easy to use if you already know about eclipse java projects.

* finnaly somehting totally subjective: I discovered java2script when I was starting to research and develop a product very very similar to java2script (an eclipse plugin based on jdt for translating java to javascript). I think at the moment, that was my first motivation of joining java2script team.

Also I've seen other projects for allowing to program RIA in java that heavily use server side for GUI computations (like layouts). Among others :

http://www.eclipse.org/rap/
http://www.fybit.com/products/riatrax4js  

This is different to java2script and gwt since the "translation result" is both to javascript+html and serverside.

Also, I've seen other java to javascript compilers that are actually java vm implementations on javascript that "execute" .class files in the browser... a completly different approach to java2script and gwt

    </programlisting>
  </section>

</chapter>
