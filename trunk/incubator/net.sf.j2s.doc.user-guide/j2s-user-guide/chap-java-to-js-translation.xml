<!-- 

    Copyright (C)  2010  Sebastián Gurin.
    Permission is granted to copy, distribute and/or modify this document
    under the terms of the GNU Free Documentation License, Version 1.3
    or any later version published by the Free Software Foundation;
    with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
    A copy of the license is included in the section entitled "GNU
    Free Documentation License".

@author: sgurin 

-->

<chapter id="chap-java-to-js-translation">


<chapterinfo>
<!--<edition>Working with native JavaScript</edition>-->
<keywordset>
  <keyword>native javascript code</keyword>
  <keyword>@j2s annotations</keyword>
</keywordset>
<!--<edition>Getting started with Java2Script</edition>-->
<!--<itermset>-->
<!--  <indexterm zone="figures"><primary>Figures</primary></indexterm>-->
<!--  <indexterm zone="figures"><primary>Pictures</primary></indexterm>-->
<!--  <indexterm zone="notreal">-->
<!--    <primary>Sections</primary><secondary>Not Real</secondary>-->
<!--  </indexterm>-->
<!--</itermset>-->
</chapterinfo>


  <title>Code Translation</title>
  
  
  <epigraph>
<attribution>Edsger W. Dijkstra</attribution>
<para>
"The question of whether computers can think is like the question of whether submarines can swim."
</para>
</epigraph>
  
  
  
  <para>Now that the user knows the basics of using the Java2Script plugin, int this chapter we will examine
  the generated code and how Java2Script translate java sources to javascript and how we can use
  this code in our html documents for lowding our translated java applications.</para>
  
  
  
   <para>Note that you won't normally need to understand how the compiler javascript code work, 
   since one of the main idea of Java2Script plugin is to abstract the java user from javascript 
   code at all. Nevertheless, it is generally a good idea to be familiar on how J2S generated 
   code works, but of course you can choose to jump to next section.</para>
   
   <para>A java to javascript code translator like J2S must translate each possible java statement 
   to its javascript equivalent. There are some constructions that are very similar in both languages like, 
   <code>for, if, while, do</code>, and other expressions. But there are Java language constructions like class, method, interface, 
   that are not present in javascript. So the compiler has also to add artificial support for these. </para>
   
     <figure>
      <title>Concepts from both languages and what J2S takes from both worlds</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/java-js-features.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure> 
   

  
  
   
    <section id="examining-generated-js-files"><title>Generated JavaScript files</title>
   
   <para>In this section we will examine the generated JavaScript files and also the generated HTML 
   document for a basic understanding 
   of how java code is translated to JavaScript and how that JavaScript can be loaded and executed 
   from an HTML document. </para>
   
   <para>Consider the following simple java class that contains one static method and one 
   instance method:</para>
   
       
<programlisting>
package my.first.project;
public class HelloWorld {
	public String getName() {
		return this.getClass().getName() + this.hashCode();
	}
	public static void main(String[] args) {
		HelloWorld obj = new HelloWorld();
		System.out.println("object name " + obj.getName());
	}
}
</programlisting>
   
   
   <para>And the generated javascript, with comments, is the following: </para>
<programlistingco>
<areaspec>
<area id="j2snative.jsex1.Clazz.declarePackage" coords='2'/>
<area id="j2snative.jsex1.Clazz.declareType" coords='3'/>
<area id="j2snative.jsex1.Clazz.defineInstanceMethod" coords='4'/>
<area id="j2snative.jsex1.Clazz.defineStaticMethod" coords='7'/>

</areaspec>
<programlisting>
Clazz.declarePackage ("my.first.project");
c$ = Clazz.declareType (my.first.project, "HelloWorld");
Clazz.defineMethod (c$, "getName", function () {
  return this.getClass().getName() + this.hashCode();
});
c$.main = Clazz.defineMethod (c$, "main", function (args) {
  var obj =  new my.first.project.HelloWorld ();
  System.out.println ("object name " + obj.getName ());
}, "~A");
</programlisting>
<calloutlist>
  <callout arearefs="j2snative.jsex1.Clazz.declarePackage">
    <para>
      this is the translation of the java statement
      <code>package my.first.project;</code>
      , declaring the package my.first.project. As with java, it is required before a class definition.
    </para>
  </callout>
  <callout arearefs="j2snative.jsex1.Clazz.declareType">
    <para>
      This is the translation of the java code
      <code>public class HelloWorld</code>
      . With
      <code>Clazz.declareType (my.first.project, "HelloWorld")</code>
      we declare the new class
      <code>HelloWorld</code>
      of package
      <code>my.first.project</code>
      an it returns the new created
      class object that we later can use for adding methods and such things.
    </para>
  </callout>
  <callout arearefs="j2snative.jsex1.Clazz.defineInstanceMethod">
    <para>
      This is the translation of the java code
      <code>public class HelloWorld</code>
      . With
      <code>Clazz.declareType (my.first.project, "HelloWorld")</code>
      we declare the new class
      <code>HelloWorld</code>
      of package
      <code>my.first.project</code>
      an it returns the new created
      class object that we later can use for adding methods and such things.
    </para>
  </callout>
  <callout arearefs="j2snative.jsex1.Clazz.defineStaticMethod">
    <para>
      this is how the static method main is defined in javascript. Note that we pass the following parameters
      to <code>Clazz.defineMethod</code> : class object (returned by declareType), method name, method function.
    </para>   
    <para>
      also notice that the only difference between declaring a static and instance methods is that
      in the case of static method declaration we assign the returned method to a class object
      property, i.e.,
      <code>$c.main = ...</code>
    </para>
  </callout>
</calloutlist>
</programlistingco>
   
   
   <para>As we can see, the <code>Clazz</code><indexterm><primary>Clazz</primary></indexterm>
    object contains functions that emulate 
   the java language. We will document all this functions in <xref linkend="java-language-emulation-api"/>.</para>
   
   
   <para>Other thing to notice is that the code translation is linear: for a java statement there is a 
   single javascript statement. Also, it is noticeable that, for the point of view of the translator, 
   there are two main types of Java statements: </para>    
   
   <itemizedlist>   
   <listitem><formalpara><title>Supported by javascript</title><para>Most java statements, like method calling, for, while, 
   if, etc. expressions, are supported directly by the javascript language and do not need almost any translation. In the previous example, 
   the java statement <code>System.out.println ("hello world");</code> remains the same both in java and in javascript.</para></formalpara></listitem>
    
   <listitem><formalpara><title>Containing java concepts not supported by javascript. </title>
   <para> Doing Object Oriented programming stuf like cľasses, methods definition, etc. Here is when we use the object Clazz: the 
   J2S java language emulator for javascript. So, for example, if we ewant to define a new class in javascript, we use 
   Clazz.declareType. </para></formalpara></listitem>     
   </itemizedlist>   
   
   <para>Now let's finnish examining a more advance java example and its transjaltion to javascript:</para>
   
   <programlisting>
package my.first.project;

import java.util.HashMap;
import java.util.Iterator;

public class MyTable extends HashMap&lt;String, Integer>{
	public String print() {
		String s = "";
		Iterator&lt;String> i = keySet().iterator();
		while (i.hasNext()) {
			s += i.next()+",";
		}
		return s;	
	}
}
</programlisting>

<para>that is translated to the following commented javascript code:</para>

<programlistingco>
<areaspec>
<area id="j2snative.jsex2.Clazz.load" coords='3'/>
<area id="j2snative.jsex2.Clazz.declareType " coords='4'/>
<area id="j2snative.jsex2.this" coords='5'/>
</areaspec>
<programlisting>
Clazz.declarePackage ("my.first.project");
Clazz.load (["java.util.HashMap"], "my.first.project.MyTable", null, function () {
  c$ = Clazz.declareType (my.first.project, "MyTable", java.util.HashMap);
  Clazz.defineMethod (c$, "print", function () {
    var s = "";
    var i = this.keySet ().iterator ();
    while (i.hasNext ()) {
      s += i.next () + ",";
    }
    return s;
  });
});
</programlisting>
<calloutlist>
<callout arearefs="j2snative.jsex2.Clazz.load">
<para><indexterm>
<primary>Clazz.load</primary></indexterm>This is different that our previous example. Since in this case, our class extends 
java.util.HashMap, we need first of all, that java.util.HashMap to be loaded and only then declare our new type.
The function <code>Clazz.load</code> help us on this. Note that the actual call to <code>Clazz.declareType</code> is
inside the callback function passed to <code>Clazz.load</code>.</para>
</callout>
<callout arearefs="j2snative.jsex2.Clazz.declareType">
<para>At this point the required class java.util.HashMap is loaded and so we can call Clazz.declareType. Notice the last argument <code>java.util.HashMap</code> 
referencing the parent class. Note that in javascript we can reference java Class objects just like in java.</para>
</callout>
<callout arearefs="j2snative.jsex2.this">
<para><indexterm><primary>this pointer in native code</primary></indexterm>Notice that calling <code>this.keySet()</code> is done just like in java, with the exception that 
in javascript the <code>this</code> keyword is not optional. </para>
</callout>
</calloutlist>
</programlistingco>
   </section>
   
   
   
   
   
   
   
   
   
   
   
   
   
   <section id="executing-java-from-html"><title>Doing java in HTML documents</title>
   
   <para>When you run a J2s application in eclipse with menu Run->Run as..->Java2Script Application
   the Java2Script plugin generates a simple html document that execute the java application. For doing that 
   it is required to perform at least the following tasks:</para>
   
   <itemizedlist>
   <listitem><para>load the j2slib.z.js Java2Script runtime script</para></listitem>
   <listitem><para>configure J2S runtime</para></listitem>
   <listitem><para>Load main class java class dependencies</para></listitem>   
   <listitem><para>execute some ava code like calling the main() method of main class.</para></listitem>
   </itemizedlist>
   
   <para>
   You can use the generated html file in yout web applications, nevertheless, it is very common to launch your Java2Script application from an existing 
   html document, or from a server page (php, jsp asp, whatever). 
   In those cases, it is 
   very helpful to understand how J2s applcations are loaded and executed. So lets examine a minimal
  html document that calls our HelloWorld java example. For generating the following html markup, the HelloWorkd java class
  is launched with a clean configuration:</para>
  
    <figure>
      <title>A clean J2S Application launcher configuration</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/j2s-configuration-clean.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>    
   
   <para>A short version of generated HTML document is the following: </para>
   
<programlistingco>
<areaspec>
<area id="j2snative.exhtml1.j2slib" coords='5'/>
<area id="j2snative.exhtml1.javasources" coords='9'/>
<area id="j2snative.exhtml1.primaryfolder" coords='10'/>
<area id="j2snative.exhtml1.projectsources" coords='11'/>
<area id="j2snative.exhtml1.loadclass" coords='12'/>
<area id="j2snative.exhtml1.javacode" coords='13'/>
</areaspec>
<programlisting>
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
&lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
&lt;head>&lt;title>my.first.project.HelloWorld&lt;/title>
&lt;script type="text/javascript" src="../path/to/j2slib/j2slib.z.js">&lt;/script>
&lt;/head>
&lt;body>
  &lt;script type="text/javascript">
    ClazzLoader.packageClasspath ("java", "../path/to/j2slib/", true);
    ClazzLoader.setPrimaryFolder ("bin");
    ClazzLoader.packageClasspath (["my.first.project", "net.sf.j2s.probes"], "bin/");  
    ClazzLoader.loadClass ("my.first.project.HelloWorld", function () {
      my.first.project.HelloWorld.main([]);
    });
  &lt;/script>
&lt;/body>
&lt;/html>
</programlisting>
<calloutlist>
<callout arearefs="j2snative.exhtml1.j2slib">
<para>
First of all it is required to include the script j2slib.z.js.
</para>
</callout>
<callout arearefs="j2snative.exhtml1.javasources">
<para>
With this call to <code>ClazzLoader.packageClasspath</code> we tell the java VM where are main 
java sources like java.lang, java.util, etc. classes, usually at the same location of file j2slib.z.js. 
</para>
</callout>
<callout arearefs="j2snative.exhtml1.primaryfolder">
<para>
Calling <code>ClazzLoader.setPrimaryFolder</code> indicates to the java VM what is the primary 
folder. In the case of a java package collition, the primary folder has precedence. 
</para>
</callout>
<callout arearefs="j2snative.exhtml1.projectsources">
<para>
Exactly the same way we have done for java main sources, this call tells the VM where to find the 
classes of our project, and that is at the "bin" folder. </para>
</callout>
<callout arearefs="j2snative.exhtml1.loadclass">
<para>
Now the intersting part. At this point we are ready to invoke some java code from our html document. We have already tell the 
VM where are the sources of each java package we need.
Remember that in Java2Script will lazily load all java classes (load only when needed). So, for executing some java code that 
involves some java classes, we first need to load
some java classes and only when loaded, we can do our java. In this case, we need to invike HelloWorld.main(), and so, we 
ask to load the class my.first.project.HelloWorld and only when it is loaded (in the function callback, second parameter), 
we invoke our java code <code>my.first.project.HelloWorld.main([]);</code>.
</para>
</callout>
<callout arearefs="j2snative.exhtml1.javacode">
<para>
As we said in the previous item, this is the actual java code that will be invoked. Note that the java sintax is very straightfordward.
Also notice that in this case we only need to call main method, but nothing prevent us for doing more complex things, like: 
</para>
<programlisting>
var requiredClasses = ["my.first.project.HelloWorld", 
  "new java.util.HashMap", "java.util.Arrays"];
ClazzLoader.loadClass (requiredClasses, function () {
  var arr = ["hello", "world", "1", "two"];
  var map1 =  new java.util.HashMap ();
  for (var i = 0; i &lt; arr.length; i++) {
    map1.put (new Integer (arr[i].length), arr[i]);
  }
  java.util.Arrays.sort(arr);
});

</programlisting>
</callout>

</calloutlist>
</programlistingco>


<para>As we can see, the ClazzLoader 
<indexterm><primary>ClazzLoader</primary></indexterm> 
javascript object contains an API do dialogate with the java runtime from javascript. It lets us configure 
and manipulate the "java virtual machine", for 
example, telling where main java library code is located, set the "class path", dynamically loading java 
classes and give as a context from where to call java classes</para>

<para>We will examine and document each of this functions in <xref linkend="java-runtime-emulation-api"/>.</para>
   </section>
   
   
   
   
   
   
   
   
   
   
   <section id="chap-java-to-js-translation-sec-types">
   <title>Types</title>
   
   
   <para>Explain how j2s emulates java types. 
   ej: string and characters are all javascript strings, 
   long, int short, double, float are all javascript numbers. arrays are javascript arrays</para>
   
   <para>Java2Script also wrapps some exceptions that can occurr </para>
   </section>
   
   
   
   
   
   
   
   <section id="chap-java-to-js-translation-sec-exceptions">
   <title>Exceptions</title>
   
   <indexterm> <primary>native exceptions</primary></indexterm>   
   <indexterm> <primary>Exception</primary></indexterm>
   <indexterm> <primary>Throwable</primary></indexterm>
   <para>Exceptions are well supported by Java2Script and so exception related statements have a very simple translation. There is only 
   one special thing we have take care about when programming Java2Script code and is that in Java2Script, besides Java exceptions, 
   there are also JavaScript native exceptions. For example, as we have seen, using @j2sNative compiler directive we can introduce 
   native javascript code. And native javascript code 
   can throw native javascript exceptions, that may have not be related at all with java exceptions (java.lang.Exception class). For example, 
   the following example will show native javascript code that throws a native DOM exception. </para>
   
   <programlisting>
/**
 * native DOM exception siumulation
 * @j2sNative
 * document.body.appendChild(null);
 */{}
   </programlisting>
   
   <para>It is important to understand that these native exceptions, are not java.lang.Exception instances and so, 
   they cannot be catched with <code>catch(Exception e)</code> expression. So, how we catch native exceptions and how can we diferentiate 
   them from common java exceptions? The answer is that native exceptions are instance of class java.lang.Throwable (a superclass of 
   java.lang.Exception) and so, we can catch them using Throwable, as the following example shows:  </para>
   
   <programlisting>
try {
  /**
   * native DOM exception siumulation
   * @j2sNative
   * document.body.appendChild(null);
   */{}
} catch (Exception e) {
  //catching java exceptions
  System.out.println("this is NOT printed!!!");
}
catch(Throwable e) {
  //catching native exceptions!
  System.out.println("this is printed!!!");
} 
   </programlisting>
   
   <para>The only special case of native exceptions are the null pointer exceptions. 
   Since both in java and javascript null is the same 
   object, and in java we spect NullPointerException to be throwed when accessing the null object, 
   native javascript null pointer exceptions will be objects of the class java.lag.NullPointerException. Let understand this 
   with a litlle example. In the following listing, we emulate a native null pointer exception and show that is catched with a NullPointerException and not as another native exception with Throwable: </para>
   
   <programlisting>
   try {
      /**
       * This simulates a native null pointer exception
       * @j2sNative
       * var a = null;
       * a.sdf();
       */{}
    } catch (NullPointerException e) {
      System.out.println("printed!");
    }
    catch (Throwable e) {
      System.out.println("NOT printed!");
    }
   </programlisting>
     
   </section>
   
   
   
   
   
   
<!--   <section><title>Concatenating several .js files into one big .js file </title>-->
<!--   <para>TODO: explain the problen of j2s clazzloader that loads several small files. it is fast to load one big file.</para>-->
<!--   <para>TODO: explain how to concatenate (if a extends b, etc).</para>-->
<!--   <para></para>-->
<!--   </section>-->





</chapter>
