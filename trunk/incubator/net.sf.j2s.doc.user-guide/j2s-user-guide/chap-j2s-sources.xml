<!-- 

    Copyright (C)  2010  SebastiÃ¡n Gurin.
    Permission is granted to copy, distribute and/or modify this document
    under the terms of the GNU Free Documentation License, Version 1.3
    or any later version published by the Free Software Foundation;
    with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
    A copy of the license is included in the section entitled "GNU
    Free Documentation License".

@author: sgurin 

-->


<chapter id="chap-j2s-sources">


<!--<chapterinfo>-->
<!--<edition>Introduction to Java2Script</edition>-->
<!--<keywordset>-->
<!--  <keyword>java2script sources</keyword>-->
<!--  <keyword>contributing</keyword>-->
<!--</keywordset>-->
<!--<edition>Java2Script sources</edition>-->
<!--<itermset>-->
<!--  <indexterm zone="figures"><primary>Figures</primary></indexterm>-->
<!--  <indexterm zone="figures"><primary>Pictures</primary></indexterm>-->
<!--  <indexterm zone="notreal">-->
<!--    <primary>Sections</primary><secondary>Not Real</secondary>-->
<!--  </indexterm>-->
<!--</itermset>-->
<!--</chapterinfo>-->


  <title>Getting started with Java2Script sources</title>
  
  <epigraph>
<attribution>Friedrich Nietzsche</attribution>
<para>
"What is happiness? The feeling that power is growing, that resistance is overcome."
</para>
</epigraph>

<section>
    <title>Getting Java2Script sources</title>

    <para>This section is for those developers who want to install Java2Script
    sources, run the plugin in Eclipse plugins sdk for testing, see how J2S
    works, be able to change it, fix it, redistribute it with your own modifications, etc</para>

    <para>We will use Eclipse 3.6. You should choose an Eclipse distribution
    that supports for Eclipse plugin development (almost all).</para>
	
	<section>
	<title>Install Eclipse 3.6 and Java2Script plugin</title>
	<para>We will need Eclipse 3.6 with the Java2Script plugin installed in order to 
	build sources. <footnote><para>Yes, Java2Script sources are compiled using the Java2Script compiler! 
	For example, many .java files, like java.lang, java.util, org.eclipse.swt, etc 
	need to be compiled to JavaScript in order to build the j2slib JavaScript library which
	all Java2Script web applications are based on.</para></footnote></para>
	
	<para>If you already have Eclipse 3.6 installed and are comfortable doing your Java programming there, you can use it. 
	If not, download an Eclipse 3.6 distribution oriented to Java and Eclipse plugin development, like Eclipse 3.6 Classic. Also download
	Java2Script plugin for Eclipse 3.6 from <ulink url="http://j2s.sourceforge.net/">Java2Script homepage</ulink> </para>
	
	<para>As explained in previous sections, installing Java2Script plugin is easy: just extract files and overwrite the 
	<code>plugins</code> Eclipse folder content and restart Eclipse.</para>
	
	<para>Once Eclipse has been restarted, you can verify whether Java2Script plugin is successfully installed or not by going to </para>
	</section>
	
	
    <section>
      <title>Install SVN support</title>

      <para>If you are a developer you probably already has SVN support in your Eclipse. 
      If not, this section will explain how you can easily install subclipse using Eclipse marketplace.</para>

	<para>Check if you have the Help-&gt;Eclipse Marketplace menu item. If so please go to the next paragraph. 
	If not, we will first need to install the Eclipse marketplace client. It is easy, just go to menu <code>Help-&gt;Install new Software... </code>
	In the dialog, enter "Work with" <code>Helios - http://download.eclipse.org/releases/helios</code>, wait a moment to Eclipse to 
	download the available software catalog and then search the work "marketplace" as shown in the following figure. Check "Marketplace Client", follow the steps 
	and wait until Eclipse marketplace client is downloaded and installed: </para>
	
	<figure>
        <title>Installing Eclipse Marketplace client</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/installing-svn-03.png"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
	
      <para>At this point you should have Eclipse marketplace client support in your Eclipse installation. So, we will install subclipse 
      plugin for SVN team support. Goto Help-&gt;Eclipse Marketplace, choose "Eclipse marketplace" and press Next </para>

      <figure>
        <title>Open Eclipse Marketplace</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/installing-svn-01.png"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
      
      <para>Click on next and search "subclipse" and then click on "install" button:</para>
      
       <figure>
        <title>search for subclipse</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/installing-svn-02.png"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>     
      
      <para>TODO At last, we must restart Eclipse to apply the changes.</para>
    </section>
    
    
    
     <section>
      <title>Import Java2Script sources</title>
      <para>Now that we have SVN support in our Eclipse, we can check out Java2Script source code. 
      Go to File-&gt;Import...-&gt;SVN-&gt;Checkout projects from SVN. </para>
      
      <figure>
        <title>Import sources from SVN repository</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/import-j2s-src-01.png"></imagedata>
          </imageobject>
        </mediaobject>
      </figure> 
      
      <para>Select "Create a new Repository location", click in "next" and enter <code>https://java2script.googlecode.com/svn/trunk/</code>
      <footnote><para>We take this url from <ulink url="http://code.google.com/p/java2script/source/checkout">Java2Script googlecode site</ulink>. 
     </para></footnote>. Clicking on next will load all folders of the project Java2Script. Expand folder "sources", and select all its child folders except 
      <code>net.sf.j2s.core</code> and <code>net.sf.j2s.ui</code>:  </para>
      
       <figure>
        <title>Import sources from SVN repository</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/import-j2s-src-02.png"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
      
      <para>Click on finnish for start checking out Java2Script project sources. </para>
      <para>Because we want to support for Eclipse 3.6 we have to obtain the sources of <code>net.sf.j2s.core</code> and <code>net.sf.j2s.ui</code> 
      from another location: <code>https://java2script.googlecode.com/svn/branches</code>. So we repeat the process for that repository location, 
      selecting <code>net.sf.j2s.core_3.6</code> and <code>net.sf.j2s.ui_3.6</code> folders:</para> 
      
       <figure>
        <title>Import sources from SVN repository</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/import-j2s-src-03.png"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
      
      <para>After this, the lastest codes are checked out. You shoud see all Java2Script related projects in your Eclipse workspace :</para>
      
        <figure>
        <title>Import sources from SVN repository</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/import-j2s-src-04.png"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
      
      <note><para>For commiting your changes back to java2script sources you need to be a member of the developer team. Just ask in 
      <ulink url="http://java2script.googlegroups.com/">Java2Script user group</ulink>. Otherway, if you only want to checkout the sources, 
      you don't need to use <code>https://</code> just <code>http://</code>.</para></note>
      
    </section>
  
  
  </section>
  
  
   <section id="section-j2s-sources-organization"><title id="section-j2s-sources-organization.title">Source organization</title>
   
   <para>the Java2Script eclipse plugin is cosntituted by several projects working together. Some of these projects contains the 
   eclipse plugin implementation, other contains the java implementation of required java APIs like java.lang, java.util, org.ecipse.swt, 
   etc and other are only auxiliary. In the following table we list the projects that are part of Java2Script and the responsbility of each of them.</para>
   
   <section><title>net.sf.j2s.core</title>
   <para>It is an eclipse plugin that contains the java to javascript compiler. It is based on eclipse JDT for parsing 
            the java code and translating it to javascript code. </para>
   </section>
   
     <section><title>net.sf.j2s.java.core</title>
   <para>This project contains the java language and java API emulation for javascript. First of all it contains
             the standar java libraries implementation (java.lang, java.utils, etc) that are currently translated to javascript 
            and used by your Java2Script application. At this time, a version of <ulink url="http://harmony.apache.org">Apache Harmony</ulink> is used. Worth mentioning that
            some core classes in java.lang like String, Class, Boolean are only implemented in javascript (there is no /java/lang/Boolean.java but a 
            /java/lang/Boolean.js file). Also notice that files /java/lang/Class.js, /java/lang/CLassExt.js and /java/lang/ClassLoader.js actually contains
            the java language emulation for javascript, like the Object oriented programming emulation, java class loading emulation, etc.</para>
   </section>
   
     <section><title>net.sf.j2s.java.org.eclipse.swt</title>
   <para>This project contains an implementation of the popular GUI toolkit <ulink url="http://eclipse.org/swt/">SWT</ulink>, the Eclipse Standar Widget Toolkit.
   This project will let you write your Rich Internet applications with SWT.</para>
   </section>
   
     <section><title>net.sf.j2s.lib</title>
   <para>This is an auxiliary project in which is deposited the more like an auxiliary project into wich all the java libraries projects are comiler</para>
   </section>
   
     <section><title></title>
   <para></para>
   </section>
   
   </section>
   
   
   
   
   
   <section><title>Building the sources</title>
  
  <para>There is a couple of things that should be done before building the sources. You only have this two things only once </para>
  
  <para>The first is to decompress the file <filename>net.sf.j2s.lib/j2slib.zip</filename>. The easy way of doing so
  is to open <filename>net.sf.j2s.lib/build/build.xml</filename> in Ant view and run the <code>j2s.unzip</code> ant task</para>  
  
  <para>Second, the project <code>net.sf.j2s.ajax</code>
  requires JAVAX_SERVLET classpath variable to point to a .jar with the Java servlet specification. 
  This is easy to infer looking at Eclipse <code>Problems</code> view.</para>
   
  <para>You can create such a classpath variable pointing to Tomcat 5.0+'s 
  servlet-apis.jar or plugin org.eclipse.tomcat's servlets.jar or other similar jar. Fortunately this is easy, first of all, 
  locate the <code>servlet-api.jar</code> file in your computer. Probably you can find it on your Eclipse <code>plugins</code> directory
  (in my case it is located at <code>eclipse/plugins/javax.servlet_2.5.0.v200910301333.jar</code>). Also, this .jar file comes 
  in any Java web server, like <ulink url="http://tomcat.apache.org/">Tomcat</ulink> (in the case of Tomcat 5.5 it is at 
  <code>common/lib/servlet-api.jar</code>)</para>
  
  <para>Now that you have located <code>servlet-api.jar</code> file in your computer, go to Eclipse <code>Package Explorer</code> view, right click 
  on the project <code>net.sf.j2s.ajax -&gt; Build Path -&gt; Configure Build Path...</code>. Go to the "Libraries" tab, double click the 
  <code>JAVAX_SERVLET</code> variable, then click on <code>Variable...</code> button and the click on <code>New...</code> button. In the 
  "New Variable Entry" dialog, enter <code>JAVAX_SERVLET</code> as the variable name and the path to servlet-api.jar as the variable value:</para>
  
  <figure>
        <title>Running the Java2Script Eclipse plugin</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/running-j2s-plugin-04.png"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
  
  <para>After this there should be no errors in the "Problems" Eclipse view and all projects should be rebuilt. The first time, this 
  may take a while. Remember that there are two compilers compiling some large projects like java.lang, java.util package, swt, and 
  other java toolkits both to .class and to javascript.</para>
  
  
  
   <para>As said in the previous section, Java2Script plugin contains two different kind of java sources. In one side we have 
   the J2S eclipse plugin itself in projects net.sf.j2s.core and net.sf.j2s.ui and in the other side we have projects like net.sf.j2s.java.core 
   and net.sf.j2s.java.org.eclipse.swt
   that are actually java libraries to be compiled into javascript and used by our Java2Script applications developed with the Java2Script plugin. </para>
  
  <para>Both kind of projects will be built automatically
  <footnote><para>Only make sure that menu <code>Project->Build Automatically</code> is checked.</para> 
  </footnote> so we only have to save our files to impact the changes. Nevertheless, if we are modifying files that will be 
  compiled to JavaScript, like the ones in project <code>net.sf.j2s.java.core</code>, we should also rebuild j2slib. It is easy. Just
  open <filename>net.sf.j2s.lib/build/build.xml</filename> in Ant view and run the <code>j2s.pack.lib</code> ant task:</para>
  
    <figure>
        <title>Packing j2slib</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/running-j2s-plugin-02.png"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
   
   <important><para>Please remember to always run <code>ant j2s.pack.lib</code> when modifying Java files to be compiled to 
   JavaScript before launching the Eclipse plugin like showed in next section.</para></important>  
  
  <para> Remember, as with any Java project, if you want to force project rebuild, you can
  always goto menu "Project -&gt; Clean" and clean all projects: also be sure that "Project  -&gt; Build Automatically" is checked for 
  automatically building when you change a file.</para>  
 
  </section>
  
  
  
  
  
  
   
  <section><title>Running and debugging</title>
  <para>Now that our sources are ready and builded, we want to run and debug the plugin. This is very easy, all you need is 
  to open <code>net.sf.j2s.core/plugin.xml</code> and click the link  <quote><code>Launch an Eclipse 
  application</code></quote> or the link <quote><code>Launch an Eclipse application in debug mode</code></quote></para>
  
    <figure>
        <title>Running the Java2Script Eclipse plugin</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/running-j2s-plugin-01.png"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
      
      <para>This will start a second Eclipse instance with our Java2Script plugin installed. Try to create a new 
      Java2Script application and test your plugin's mdifications in that instance...</para>
      
      <para>Like with any Eclipse plugin, rememeber that you can add breakpoints in Java code for better debbugging the Java to JavaScript compiler:</para>
  
  	<figure>
        <title>A breakpoint in some Java to JavaScript compiler class:</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/running-j2s-plugin-03.png"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
      
      
  </section>


  <section>
    <title>Exporting the plugin</title>
    <para>
      So you make your changes and now you want to redistribute the plugin. As with any other
      Eclipse plugin, you have to export it as an eclipse plugin. It is very easy... </para>
    <para>TODO. this is documented at : http://j2s.sourceforge.net/setup-j2s-from-subversion.html. this is what it sais: </para>
    
<para>Export the above 4 projects as "Deployable plug-ins and fragments". For example, 
you may select C:\eclipse as the directory of export 
destination. Project "net.sf.j2s.ajax" and "net.sf.j2s.lib" must be exported with 
"Package plug-ins as individual Jar archives" UNCHECKED. And project "net.sf.j2s.ajax" 
should be exported with "Include source code" option CHECKED, so later you can bind 
sources much easily.</para>    



  </section>



  
  
  
  

<section>
    <title>How to Extend the Java2Script compiler</title>
    
    <para>Now that you know how to install and run Java2Script from the sources, and know how to export your own version of Java2Script,
      we will describe a mechanism supported by Java2Script eclipse plugin that will let us extend the compiler easily, without modifying
      the compiler sources and without having to learn all compiler related classes internals for doing it. </para>

  <note>
    <para>Original Java2Script articles about this topic are are the following:</para>
    <para>http://j2s.sourceforge.net/articles/tutorial-extended-compiler.html </para>
    <para>http://blog.java2script.org/2006/10/31/extending-java2script-compiler/</para>
  </note>

  <para>In this section you will learn how to customize how to customize the output of j2s compiler. You will be able to make an eclipse plugin that 
  contribute to Java2Script Compiler with custom code for performing the translation of desired java language elements, like methods, classes, fields, 
  expressions, statements, comments, etc to javascript. The main benefit of using an independent eclipse plugin is that you can isolate your customization code
  from java2script compiler nd so the same java2script distribution can be used for different java to javascript compiling scenarios.</para>
  
  <para>Basically, this eclipse plugin must indicate what it want to customize, and provide the actual code translation for that parts. For example,  </para>
  
  <itemizedlist>
  <listitem><para>analize each method invocation and add some javascript code before or after the invocation.</para></listitem>
  
  <listitem><para>analize each javadoc comment and search for a certain string or javadoc annotation inside it 
  and add some javascript code before or after the java element documented with that javadoc</para></listitem>
  <listitem><para>add javascript code before or after a class declaration for classes that apply some conditions</para></listitem>
  <listitem><para>customize how java classes must be loaded in certain circunstances</para></listitem>
  </itemizedlist>

<para>For developing the eclipse plugin we will use the eclipse plugin environment (PDE) that 
comes with common eclipse distributions. It is recommended but not mandatory to be familiarized
with PDE, so you may want to read <ulink url="http://help.eclipse.org/helios/nav/4">Plug-in Development Environment Guide </ulink>. </para>

<para>We will also will need to model java elements like classes, methods, attributes, expressions, statements. 
For this, we will use eclipse Java Develpment Tools (JDT) and so, for taking full advantadge of this, it is recommended to know the basics about JDT. 
So, you may want to read <ulink url="http://help.eclipse.org/helios/nav/3">JDT programmers guide</ulink></para>



<!--extending-j2s-compiler-plugin-java-elements.png-->

<section>
<title>Creating a Java2Script compiler extension eclipse plugin</title>

<para>In this section we will create an eclipse plugin that contributes to Java2Script compiler with a very simple behavior: it  
will add a javascript comment before 
each method invocation, and then the normal method invocation javascript code. </para>


<para>so select File->New->Project...->Plugin Project</para>
        <figure>
      <title>Creating a new plugin eclipse project</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/extending-j2s-compiler-new-plugin-project.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure> 
    
    <para>Press "next" button.</para>
            <figure>
      <title>Giving a name to the plugin</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/extending-j2s-compiler-new-plugin-project2.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure> 
    
    
    <para>Press "next" button and in the following step make sure to choose "No" to "Would you like to create a rich client application?":</para>
    <figure>
      <title>new eclipse plugin project last step</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/extending-j2s-compiler-new-plugin-project3.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure> 
    
    <para>Press finnish for creating your new J2S compiler extension plugin. Now we want to add "org.eclipse.jdt.core" 
    and "net.sf.j2s.core" dependencies to out new plugin. For this, double click on file META-INF/MANIFEST.MF will open the 
    eclipse plugin editor. Goto the "Dependencies" tab and add "org.eclipse.jdt.core" and "net.sf.j2s.core" as the dependencies: </para>
    
       <figure>
      <title>eclipse plugin dependencies tab.</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/extending-j2s-compiler-plugin-dependencies.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure> 
    
    
    <note><para>At this point you have created an J2S extension plugin general project. All previous steps must be performed 
    identically for all your J2s extension plugins. </para>
    </note>
    
        
    <para>Now we want to add an extension point from where our plugin will be plugged to the java2script compiler. Let's detail a little how Java2Script 
    works and how our extenison is plugged into the java to javascript compiler. </para>
    
    <para>First of all, the java2script compiler uses eclipse JDT java compiler for parsing all java code into a tree  of <emphasis>java elements </emphasis>, 
    called an Abstract syntax tree (AST). For example, a java compilation unit can contain a class declaration, with methods and fields declarations.  A method 
    contains a body, and the body some statements. Statements are composed by expresions, etc. In the following
    figure, the eclipse Outline view shows some of this java elements graphically:    
    </para>
    <figure>
      <title>eclipse outline view showing some java elements of a compilation unit</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/extending-j2s-compiler-plugin-java-elements.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure> 
    
    
    <para>Then the compiler uses "visitors" for converting java source codes to javascript.
     A visitor is an object which class contains overloaded "visit" methods for visiting  each of java element types. Defining new visitors, you can 
     overwrite the "visit" methods corresponding to the desired java element type that you want to customize its translation to javascript. 
     Java2Script uses TWO kind of visitors for doing the total translation from java to javascript:</para>
    
   <formalpara><title>ASTScriptVisitor</title> <para>
    In one side we have an ASTScriptVisitor that is responsible for converting basic java elements to the corresponding javascript code. J2S provides with the default 
    implementation net.sf.j2s.core.astvisitors.SWTScriptVisitor that can be extended for building customized AST script visitors. 
    </para></formalpara>
    
       <formalpara><title>DependencyASTVisitor</title> <para>
   The other type if visitor is DependencyASTVisitor that is responsible for creating a class dependency trees, 
    in other words an import list for each java file. J2S provides with a default implemenation net.sf.j2s.core.astvisitors.SWTDependencyVisitor. It is 
    recommended that the user extends this class for defining its own AST dependency visitors. </para></formalpara>
    
   <para>go to the "extensions" tab  and add the extension point <code>net.sf.j2s.core.extendedASTScriptVisitor</code>:</para>
    <figure>
      <title>eclipse plugin - adding extension point</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/extending-j2s-compiler-plugin-extension1.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure> 
    
    <para>This extension point will allow us to provide with a class that will return the kind of visitor your extension want to provide. 
    So choose the right id and class name. The id is very important because you must refence it in each Java2Script project that must be builded using 
    this compiler extension, so remember it. In our name is "j2s.extension1.MethodInvocationComment1". Now click on "class" link for creating the new class: </para>
     <figure>
      <title>eclipse plugin - setting extension point name</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/extending-j2s-compiler-plugin-extension2.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure> 
    
    <figure>
      <title>eclipse plugin - creating extension point class</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/extending-j2s-compiler-plugin-extension3.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure> 

    <para>Pressing finnish button for creating the class. This class msut implement interface net.sf.j2s.core.compiler.IExtendedVisitor. 
    and should return the two visitors, ASTScriptVisitor and DependencyASTVisitor, to use by the Java2Script compiler for converting java 
    to javascript.</para>
    
    <para>In our example, we want only to provide a ScriptVisitor for changing how the java element "method invocation" is translated to javascript. We will use the default DependencyVisitor
    since we don't want  customize anything of the java dependency tree: </para>
    
<programlistingco>
<areaspec>
<area id="j2s-compiler-ext-getScriptVisitor2" coords='14'/>
<area id="j2s-compiler-ext-getDependencyVisitor" coords='18'/>
</areaspec>
<programlisting>
package j2s.extension1;

import net.sf.j2s.core.astvisitors.ASTScriptVisitor;
import net.sf.j2s.core.astvisitors.DependencyASTVisitor;
import net.sf.j2s.core.astvisitors.SWTDependencyASTVisitor;
import net.sf.j2s.core.compiler.IExtendedVisitor;

public class MethodInvocationComment1 implements IExtendedVisitor {

  public MethodInvocationComment1() {
  }

  public ASTScriptVisitor getScriptVisitor() {
    return new MethodInvocationComment1ScriptVisitor();
  }

  public DependencyASTVisitor getDependencyVisitor() {
    return new DependencyASTVisitor();
  }
}
</programlisting>
<calloutlist>
<callout arearefs="j2s-compiler-ext-getScriptVisitor2">
<para>we will use our own Script visitor, MethodInvocationComment1ScriptVisitor that we must create extending the default Script visitor net.sf.j2s.core.astvisitors.ASTScriptVisitor</para>
</callout>
<callout arearefs="j2s-compiler-ext-getDependencyVisitor">
<para>use the default J2S dependency visitor, net.sf.j2s.core.astvisitors.DependencyASTVisitor</para>
</callout>
</calloutlist>
</programlistingco>
    
    <para>Now, the only thing left is to create our custom Script Visitor that we named MethodInvocationComment1ScriptVisitor, so create the class:</para>
    
    <programlistingco>
<areaspec>
<area id="j2s-compiler-ext-ScriptVisitor1" coords='10'/>
<area id="j2s-compiler-ext-ScriptVisitor2" coords='11'/>
<area id="j2s-compiler-ext-ScriptVisitor3" coords='12'/>
</areaspec>
<programlisting>
package j2s.extension1;

import org.eclipse.jdt.core.dom.MethodInvocation;

import net.sf.j2s.core.astvisitors.SWTScriptVisitor;

public class MethodInvocationComment1ScriptVisitor extends SWTScriptVisitor {
  @Override
  public boolean visit(MethodInvocation node) {
    buffer.append("/* A COMMENT ADDED WITH our J2S compiler extension plugin */\n");
    return super.visit(node);
  }
}

</programlisting>
<calloutlist>
<callout arearefs="j2s-compiler-ext-ScriptVisitor1">
<para>Overriding method visit(MethodInvocation node) we can customize how java method invocations are translated to javascript.</para>
</callout>
<callout arearefs="j2s-compiler-ext-ScriptVisitor2">
<para>the StringBuilder buffer field containshe Ã§actual javascript code. So we write our custom javascript comment before the method translation. </para>
</callout>
<callout arearefs="j2s-compiler-ext-ScriptVisitor3">
<para>invoking <code>super.visit(node)</code> will invoke the default implementation for java method invocation translation. We do it after writing our custom javascript code.  </para>
</callout>
</calloutlist>
</programlistingco>


<para>And that's it, your compiler extension is ready for use. You can export and install it as any other eclipse plugin. Remember that java2script plugin must be 
installed. </para>

<important>
<para>For using this extension in a Jav2Script project you must indicate the id of your J2S extension in your project's .j2s file. In our case 
you should add the following line to the .j2s file of the projects you want to compile with the extension:</para>
</important>

<programlisting>
j2s.compiler.visitor=j2s.extension1.MethodInvocationComment1
</programlisting>

<para>Now let's see how our J2S extension translate the following java class:</para>

<programlisting>
package j2s.extension1;

import org.eclipse.jdt.core.dom.MethodInvocation;

import net.sf.j2s.core.astvisitors.ASTScriptVisitor;

public class MethodInvocationComment1ScriptVisitor extends ASTScriptVisitor {
  @Override
  public boolean visit(MethodInvocation node) {
    buffer.append("/* A COMMENT ADDED WITH our J2S compiler extension plugin */\n");
    return super.visit(node);
  }
}

</programlisting>

<para>and the resulting javascript is</para>

<programlisting>Clazz.declarePackage ("org.foo");
c$ = Clazz.declareType (org.foo, "Test1");
c$.main = Clazz.defineMethod (c$, "main", 
function (args) {
/* A COMMENT ADDED WITH our J2S compiler extension plugin */
java.lang.System.out.println ("hee");
}, "~A");
</programlisting>

<para>as you can see, out javascript custom comment was appended just before the method declaration at <code>java.lang.System.out.println ("hee");</code> </para>

</section>







    

  <section><title>Other example: html attributes with javadoc annotations</title>
  <para>In this second example we show how to load string from javadoc comments into java fields. 
  In web applications, we usually have to reference html, json, xml or other web format strings 
  in our code and sometimes it is nasty to do it in common java or javascript strings literals. </para>
  
  <para>The following is the java class code that implements ASTScriptVisitor that will detect and load a 
  string in javadoc after the tag <code>@j2sLoadString</code> .</para>
  
  
  <programlisting>
package j2s.extension1;

import java.util.Iterator;
import java.util.List;

import net.sf.j2s.core.astvisitors.SWTScriptVisitor;

import org.eclipse.jdt.core.dom.FieldDeclaration;
import org.eclipse.jdt.core.dom.Javadoc;
import org.eclipse.jdt.core.dom.TagElement;
import org.eclipse.jdt.core.dom.VariableDeclarationFragment;

public class MethodInvocationComment1ScriptVisitor extends SWTScriptVisitor {

  @Override
  public boolean visit(FieldDeclaration node) {       
    boolean ret = super.visit(node); /* first visit the default visitor implementation */
    
    Javadoc javadoc = node.getJavadoc();
    List tags = javadoc.tags();   
    if(tags!=null&amp;&amp;tags.size()&gt;0) {
      for (Iterator it = tags.iterator(); it.hasNext();) {
        Object o = (Object) it.next();
        if(o instanceof TagElement) {
          TagElement tag = (TagElement) o;
          String tagName = tag.getTagName();
          if(tagName!=null&amp;&amp;tagName.equals("@j2sLoadString")) { /* annotation found. all the 
            following javadoc comment until other tag is found will be loaded */
            StringBuffer sb = new StringBuffer();
            List frags = tag.fragments();
            for (Iterator it2 = frags.iterator(); it2.hasNext();) {
              sb.append(it2.next()+"\\n");
            }
            List fieldDeclFrags = node.fragments();
            /* now that we have the @j2sLoadString string, we add the javascript statement this.attributeName="str.." for loading the string field.*/
            if(fieldDeclFrags!=null&amp;&amp;fieldDeclFrags.size()&gt;0) {
              VariableDeclarationFragment f1 = (VariableDeclarationFragment) fieldDeclFrags.get(0);
              String str = sb.toString();             
              buffer.append("this."+f1.getName()+"=\'");
              buffer.append(str);
              buffer.append("\';\n");
            }
          }
        }
      }
    }
    return ret;
  }
}
</programlisting>
  
  <para>Using this compiler extension, you will be able to code complex strings like json, html, xml, etc inside javadoc. 
  The following java test program define two fields, htmlCode1 and jsonCode1 which content is loaded from javadoc and not from string literals. 
  As you can see there is much easier to put 
  other language code inside javadoc instead using java string, in which you have to quote and concatenate:</para>
  
  <programlisting>
  package org.foo;

public class Test1 {    
       
  public static void main(String[] args) {
    Test1 test1 = new Test1();
    System.out.println("loaded html code: "+test1.getHtmlCode1());
    System.out.println("loaded json code: "+test1.getJsonCode1());
    System.out.println("lot easier isn't it?");
  }  
  /** this field will be loaded with the fololowing string:
   * @j2sLoadString 
   * &lt;h1&gt;this is an &lt;b&gt;html&lt;/b&gt; string loaded from javadoc&lt;/h1&gt;
   */
  String htmlCode1;
  
  /**
   * this other too
   * @j2s LoadString
   * {p1: [1, 2, 3], p2: {p21: "thi sis a json loaded from javadoc"}}
   */
  String jsonCode1;

  public String getHtmlCode1() {
    return htmlCode1;
  }

  public String getJsonCode1() {
    return jsonCode1;
  }    
}  
  </programlisting>
  
  
  <para>Compiling this using our new compiler extension, the output will be the following when executing this as a Java2Script application:</para>
  
  
  <programlisting>
loaded html code:
&lt;h1&gt;this is an &lt;b&gt;html&lt;/b&gt; string loaded from javadoc&lt;/h1&gt;
 
loaded json code: {p1: [1, 2, 3], p2: {p21: "thi sis a json loaded from javadoc"}}
 
lot easier isn't it?
  </programlisting>
  </section>
</section>

</chapter>
