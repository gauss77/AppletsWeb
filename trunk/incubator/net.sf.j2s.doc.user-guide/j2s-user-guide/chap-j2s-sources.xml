<!-- 

    Copyright (C)  2010  SebastiÃ¡n Gurin.
    Permission is granted to copy, distribute and/or modify this document
    under the terms of the GNU Free Documentation License, Version 1.3
    or any later version published by the Free Software Foundation;
    with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
    A copy of the license is included in the section entitled "GNU
    Free Documentation License".

@author: sgurin 

-->


<chapter id="chap-j2s-sources">


<!--<chapterinfo>-->
<!--<edition>Introduction to Java2Script</edition>-->
<!--<keywordset>-->
<!--  <keyword>java2script sources</keyword>-->
<!--  <keyword>contributing</keyword>-->
<!--</keywordset>-->
<!--<edition>Java2Script sources</edition>-->
<!--<itermset>-->
<!--  <indexterm zone="figures"><primary>Figures</primary></indexterm>-->
<!--  <indexterm zone="figures"><primary>Pictures</primary></indexterm>-->
<!--  <indexterm zone="notreal">-->
<!--    <primary>Sections</primary><secondary>Not Real</secondary>-->
<!--  </indexterm>-->
<!--</itermset>-->
<!--</chapterinfo>-->


  <title>Getting started with Java2Script sources</title>
  
  <epigraph>
<attribution>Friedrich Nietzsche</attribution>
<para>
"What is happiness? The feeling that power is growing, that resistance is overcome."
</para>
</epigraph>

<section>
    <title>Getting Java2Script sources</title>

    <para>This section is for those developers who want to install Java2Script
    sources, run the plugin in Eclipse plugins sdk for testing, see how J2S
    works, be able to change it, fix it, redistribute it with your own modifications, etc</para>

    <para>We will use Eclipse 3.6. You should choose an Eclipse distribution
    that supports for Eclipse plugin development (almost all).</para>
	
	<section>
	<title>Install Eclipse 3.6 and Java2Script plugin</title>
	<para>We will need Eclipse 3.6 with the Java2Script plugin installed in order to 
	build sources. <footnote><para>Yes, Java2Script sources are compiled using the Java2Script compiler! 
	For example, many .java files, like java.lang, java.util, org.eclipse.swt, etc 
	need to be compiled to JavaScript in order to build the j2slib JavaScript library which
	all Java2Script web applications are based on.</para></footnote></para>
	
	<para>If you already have Eclipse 3.6 installed and are comfortable doing your Java programming there, you can use it. 
	If not, download an Eclipse 3.6 distribution oriented to Java and Eclipse plugin development, like Eclipse 3.6 Classic. Also download
	Java2Script plugin for Eclipse 3.6 from <ulink url="http://j2s.sourceforge.net/">Java2Script homepage</ulink> </para>
	
	<para>As explained in previous sections, installing Java2Script plugin is easy: just extract files and overwrite the 
	<code>plugins</code> Eclipse folder content and restart Eclipse.</para>
	
	<para>Once Eclipse has been restarted, you can verify whether Java2Script plugin is successfully installed or not by going to </para>
	</section>
	
	
    <section>
      <title>Install SVN support</title>

      <para>If you are a developer you probably already has SVN support in your Eclipse. 
      If not, this section will explain how you can easily install subclipse using Eclipse marketplace.</para>

	<para>Check if you have the Help-&gt;Eclipse Marketplace menu item. If so please go to the next paragraph. 
	If not, we will first need to install the Eclipse marketplace client. It is easy, just go to menu <code>Help-&gt;Install new Software... </code>
	In the dialog, enter "Work with" <code>Helios - http://download.eclipse.org/releases/helios</code>, wait a moment to Eclipse to 
	download the available software catalog and then search the work "marketplace" as shown in the following figure. Check "Marketplace Client", follow the steps 
	and wait until Eclipse marketplace client is downloaded and installed: </para>
	
	<figure>
        <title>Installing Eclipse Marketplace client</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/installing-svn-03.png"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
	
      <para>At this point you should have Eclipse marketplace client support in your Eclipse installation. So, we will install subclipse 
      plugin for SVN team support. Goto Help-&gt;Eclipse Marketplace, choose "Eclipse marketplace" and press Next </para>

      <figure>
        <title>Open Eclipse Marketplace</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/installing-svn-01.png"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
      
      <para>Click on next and search "subclipse" and then click on "install" button:</para>
      
       <figure>
        <title>search for subclipse</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/installing-svn-02.png"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>     
      
      <para>TODO At last, we must restart Eclipse to apply the changes.</para>
    </section>
    
    
    
     <section>
      <title>Import Java2Script sources</title>
      <para>Now that we have SVN support in our Eclipse, we can check out Java2Script source code. 
      Go to File-&gt;Import...-&gt;SVN-&gt;Checkout projects from SVN. </para>
      
      <figure>
        <title>Import sources from SVN repository</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/import-j2s-src-01.png"></imagedata>
          </imageobject>
        </mediaobject>
      </figure> 
      
      <para>Select "Create a new Repository location", click in "next" and enter <code>https://java2script.googlecode.com/svn/trunk/</code>
      <footnote><para>We take this url from <ulink url="http://code.google.com/p/java2script/source/checkout">Java2Script googlecode site</ulink>. 
     </para></footnote>. Clicking on next will load all folders of the project Java2Script. Expand folder "sources", and select all its child folders except 
      <code>net.sf.j2s.core</code> and <code>net.sf.j2s.ui</code>:  </para>
      
       <figure>
        <title>Import sources from SVN repository</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/import-j2s-src-02.png"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
      
      <para>Click on finnish for start checking out Java2Script project sources. </para>
      <para>Because we want to support for Eclipse 3.6 we have to obtain the sources of <code>net.sf.j2s.core</code> and <code>net.sf.j2s.ui</code> 
      from another location: <code>https://java2script.googlecode.com/svn/branches</code>. So we repeat the process for that repository location, 
      selecting <code>net.sf.j2s.core_3.6</code> and <code>net.sf.j2s.ui_3.6</code> folders:</para> 
      
       <figure>
        <title>Import sources from SVN repository</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/import-j2s-src-03.png"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
      
      <para>After this, the lastest codes are checked out. You shoud see all Java2Script related projects in your Eclipse workspace :</para>
      
        <figure>
        <title>Import sources from SVN repository</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/import-j2s-src-04.png"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
      
      <note><para>For commiting your changes back to java2script sources you need to be a member of the developer team. Just ask in 
      <ulink url="http://java2script.googlegroups.com/">Java2Script user group</ulink>. Otherway, if you only want to checkout the sources, 
      you don't need to use <code>https://</code> just <code>http://</code>.</para></note>
      
    </section>
  
  
  </section>
  
  
   <section id="section-j2s-sources-organization"><title id="section-j2s-sources-organization.title">Source organization</title>
  <para>As said in previous sections, Java2Script plugin contains both .java files that will be compiled into .class like 
  any other Java application like projects <code></code>, but also contains a lot of .java files, this will be compiled by 
  Java2Script compiler itself to JavaScript files. </para>
  
  <formalpara><title>plugin related projects</title><para>
  <code>net.sf.j2s.core</code>, <code>net.sf.j2s.lib</code>, <code>net.sf.j2s.ajax</code>
  <code>net.sf.j2s.ui</code>. 
  TODO: explain more</para></formalpara>
  
  
  <formalpara><title>javascript related projects</title><para>
  <code>net.sf.j2s.java.core</code>, <code>net.sf.j2s.java.junit</code>, <code>net.sf.j2s.org.eclipse.swt</code>. 
  TODO: explain more</para></formalpara> 
  
  
  <para>Both kind of projects will be built automatically
  <footnote><para>Only make sure that menu <code>Project->Build Automatically</code> is checked.</para> 
  </footnote> so we only have to save our files to impact the changes. Nevertheless, if we are modifying files that will be 
  compiled to JavaScript, like project <code>net.sf.j2s.java.core</code>, we should also rebuild j2slib. It is easy. Just
  open <filename>net.sf.j2s.lib/build/build.xml</filename> in Ant view and run the <code>j2s.pack.lib</code> ant task:</para>
  
    <figure>
        <title>Packing j2slib</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/running-j2s-plugin-02.png"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
   
   <important><para>Please remember to always run <code>ant j2s.pack.lib</code> when modifying Java files to be compiled to 
   JavaScript before launching the Eclipse plugin like showed in next section.</para></important>   
   </section>
   
   
   
  <section><title>Building the sources</title>
  
  <para>There is a couple of things that should be done before building the sources. You only have this two things only once </para>
  
  <para>The first is to decompress the file <filename>net.sf.j2s.lib/j2slib.zip</filename>. The easy way of doing so
  is to open <filename>net.sf.j2s.lib/build/build.xml</filename> in Ant view and run the <code>j2s.unzip</code> ant task</para>  
  
  <para>Second, the project <code>net.sf.j2s.ajax</code>
  requires JAVAX_SERVLET classpath variable to point to a .jar with the Java servlet specification. 
  This is easy to infer looking at Eclipse <code>Problems</code> view.</para>
   
  <para>You can create such a classpath variable pointing to Tomcat 5.0+'s 
  servlet-apis.jar or plugin org.eclipse.tomcat's servlets.jar or other similar jar. Fortunately this is easy, first of all, 
  locate the <code>servlet-api.jar</code> file in your computer. Probably you can find it on your Eclipse <code>plugins</code> directory
  (in my case it is located at <code>eclipse/plugins/javax.servlet_2.5.0.v200910301333.jar</code>). Also, this .jar file comes 
  in any Java web server, like <ulink url="http://tomcat.apache.org/">Tomcat</ulink> (in the case of Tomcat 5.5 it is at 
  <code>common/lib/servlet-api.jar</code>)</para>
  
  <para>Now that you have located <code>servlet-api.jar</code> file in your computer, go to Eclipse <code>Package Explorer</code> view, right click 
  on the project <code>net.sf.j2s.ajax -&gt; Build Path -&gt; Configure Build Path...</code>. Go to the "Libraries" tab, double click the 
  <code>JAVAX_SERVLET</code> variable, then click on <code>Variable...</code> button and the click on <code>New...</code> button. In the 
  "New Variable Entry" dialog, enter <code>JAVAX_SERVLET</code> as the variable name and the path to servlet-api.jar as the variable value:</para>
  
  <figure>
        <title>Running the Java2Script Eclipse plugin</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/running-j2s-plugin-04.png"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
  
  <para>After this there should be no errors in the "Problems" Eclipse view and all projects should be rebuilt. The first time, this 
  may take a while. Remember that there are two compilers compiling some large projects like java.lang, java.util package, swt, and 
  other java toolkits both to .class and to javascript.</para>
  
  <para> Remember, like any Java project, if you want to force project rebuild, you can
  always goto menu "Project -&gt; Clean" and clean all projects: also be sure that "Project  -&gt; Build Automatically" is checked for 
  automatically building when you change a file.</para>
  
  <important>
  <para>Also, as explained in <quote><link endterm="section-j2s-sources-organization.title"
    linkend="section-j2s-sources-organization"></link> </quote> you must run <code>ant j2s.pack.lib</code> once before running the plugin.</para>
  </important>
  </section>
  
  
  <section><title>Running and debugging</title>
  <para>Now that our sources are ready and builded, we want to run and debug the plugin. This is very easy, all you need is 
  to open <code>net.sf.j2s.core/plugin.xml</code> and click the link  <quote><code>Launch an Eclipse 
  application</code></quote> or the link <quote><code>Launch an Eclipse application in debug mode</code></quote></para>
  
    <figure>
        <title>Running the Java2Script Eclipse plugin</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/running-j2s-plugin-01.png"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
      
      <para>This will start a second Eclipse instance with our Java2Script plugin installed. Try to create a new 
      Java2Script application and test your plugin's mdifications in that instance...</para>
      
      <para>Like with any Eclipse plugin, rememeber that you can add breakpoints in Java code for better debbugging the Java to JavaScript compiler:</para>
  
  	<figure>
        <title>A breakpoint in some Java to JavaScript compiler class:</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/running-j2s-plugin-03.png"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
      
      
  </section>
  
  
  <section><title>Exporting the plugin</title><para>
      So you make your changes and now you want to redistribute the plugin. As with any other 
      Eclipse plugin, you have to export it as an eclipse plugin. It is very easy, </para>
      
  </section>
      

</chapter>
