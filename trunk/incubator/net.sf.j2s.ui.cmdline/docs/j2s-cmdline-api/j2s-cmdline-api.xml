<!-- 
@author: sugurin
TODO: if this cmdline utility is included as j2s part, this document should be a section of j2s-user-guide

 -->
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
                "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
                
<?xml-stylesheet type="text/xsl" href="../docbook-xsl/xhtml/docbook.xsl"?> 

<article>
        <author><surname>Gurin</surname><firstname>Sebastian</firstname></author> 
    <title>Java2Script Command line API plugin </title>
    
    <abstract>  <para>This document describes the project net.sf.j2s.ui.cmdline, 
    an eclipse plugin project to provide <ulink url="http://j2s.sourceforge.net/">Java2Script</ulink>
    with a basic command line api so the user can translate its java projects to javascript programatically using the command 
    line (with no GUI interaction at all)</para>    
    </abstract>
    
    
    <articleinfo>
    <title>Java2Script Command line API plugin </title>
	<author><surname>Gurin</surname><firstname>Sebastian</firstname></author>
  
  
  <revhistory>  
    <revision>
      <revnumber>0.01</revnumber>
      <date>20 July 2010</date>
      <authorinitials>sebastiGurin</authorinitials>
      <revremark>Initial revision and release</revremark>
    </revision>
  
  </revhistory>
   
    </articleinfo>


  <section>
    <title>About this document</title>

  <para>This document is available in the following formats:</para>
  
  <orderedlist>
    
	  <listitem><formalpara><title>PDF</title><para>
	  <ulink url="j2s-cmdline-api.pdf">Java2Script Command line API plugin</ulink></para></formalpara></listitem>
	  
	  <listitem><formalpara><title>Single HTML</title><para>
	  <ulink url="j2s-cmdline-api.html">Java2Script Command line API plugin</ulink></para></formalpara></listitem>
	  
	  
	  <listitem><formalpara><title>HTML fragmented</title><para>
	  <ulink url="j2s-cmdline-api-htmls">Java2Script Command line API plugin</ulink></para></formalpara></listitem>
	  
	  <listitem><formalpara><title>DocBook</title><para>
	  <ulink url="j2s-cmdline-api.xml">Java2Script Command line API plugin</ulink></para></formalpara></listitem>
	  
	  <listitem><formalpara><title>download HTMLs</title><para>
	  <ulink url="j2s-cmdline-api.tgz">Java2Script Command line API plugin</ulink></para></formalpara></listitem>
  
  </orderedlist>


  </section>



  
  
  <section>
    <title>Introduction to Java2Script Command Line API</title>
    
	<para>From the user interaction point of view <ulink url="http://j2s.sourceforge.net/">Java2Script</ulink> 
	is a great visual application that let the user 
	program their web enabled applications in java, just like with any other java application in eclipse. 
	Java2Script provides an incremental java to javascript eclipse builder that transforms in a very clean and 
	straightforward way each of your .java files in .js files. This frees the user to worry about the internals 
	of Java to JavaScript translation and JavaScript code loading at all. </para>
	
	<para>Nevertheless, from the point of view 
	of interaction with other software development tools, it is important for a java to javascript translator user to be able to invike the translator
	programatically, not interactively, for example, from the command line. For example, it is very common that 
	that projects use build tools and project management tools like <ulink url="http://ant.apache.org">ant</ulink>, 
	<ulink url="http://ant.apache.org/ivy">ivy</ulink>, <ulink url="http://maven.apache.org/">maven</ulink> for programatically project building and 
	management. A common scenario is be able of translating a java source folder to javascript with an ant task.  
	</para>
	
	<para>Fortunately, the plugin <code>net.sf.j2s.ui.cmdline</code> gives the ability to Java2Script users
	to perform Java2Script related tasks from the command line, like project building and configuring, j2s application 
	enderization, etc. The user only need to call eclipse with some special parameters, and this will launch  
	eclipse and perform Java2Script related task (given in command line args), without showing any GUI, just 
	like if it where a command line tool.
	</para>
	
	<para>The main objectives of <code>net.sf.j2s.ui.cmdline</code> is to expose to the command line user most important Java2Script related tasks, 
	like project import, creation, configuration and building and J2S application renderization. </para>	
	
	
	
	 <note><para>In all the following command line examples, we use the '\' character for indicating a new line in the command, 
	 so we can look at the command line in two dimensions. This is valid in bash (linux) but not in a windows shell. </para></note>
	 
	
	<para>As an initial example, this command line will building existing Java2Script projects located at 
	<filename>/dev/workspace/proj1</filename>, and <filename>/dev/workspace/proj2</filename>:</para>
	
	<programlisting>
eclipse -nosplash -application net.sf.j2s.ui.cmdlineApi \
	-cmd build -path /dev/workspace/proj1 \
	-cmd build -path /dev/workspace/proj2
	</programlisting>
	
	<para>This command will launch eclipse, import and build the eclipse project at <filename>/dev/workspace/proj1</filename>, 
	then import and build project at <filename>/dev/workspace/proj2</filename> and then exit eclipse. All of this 
	without showing any window or GUI at all. </para>
	
	<para>Please note that besides the time the Java2Script compiler takes for building 
	the project itself, it will have a delay of 5 to 10 seconds while loading eclipse IDE itself. </para>
	
	<para>All parameters and command line syntax, and use case examples will be explained in later section. Important things to 
	notice now is that each <code>-cmd</code> command line argument define a new command. In the previous examples, 
	two commands where specified, one for building proj1 and other for building proj2.</para>
		
	<para>A nice feature of <code>net.sf.j2s.ui.cmdline</code> is that you can work both with existing eclipse 
	Java2Script projects or create and configure a Java2Script project using existing java source folders not managed 
	by eclipse at all: </para>
	
	<example><title>Build an existing eclipse project</title>
	<para>For building an existing Java2Script existing project enter the following command. Notice that the eclipse project will be imported to the
	workspace and so current eclipse project configuration, like classpath, sourcefolderss, outputlocation, etc  will be used. </para>
	<programlisting>
eclipse -nosplash -application net.sf.j2s.ui.cmdlineApi \
	-cmd build -path /path/to/project
	</programlisting>
	</example>
	
	<example><title>Create and configure an eclipse project based on existing sources not related to eclipse</title>
	<para>Suppose you want to translate to javascript al java file in a java sourcefolder that is not part of an eclipse project. 
	Suppose your source folder is located at /path/to/project/src and you want to put generated javascript files at /path/to/project/js folder. The command for this is: 
	</para>
	
	<programlisting>
eclipse -nosplash -application net.sf.j2s.ui.cmdlineApi \
	-cmd newProject -path /path/to/project -projectName p1 -sourceFolders src -outputFolder js \
	-cmd build -projectName p1
	</programlisting>
	</example>
	
	<para>Other nice feature of <code>net.sf.j2s.ui.cmdline</code> is that provides with a rich command line 
	syntax that allow the user to perform a secuence of tasks serially, so you can do 
	all your work in a single "eclipse call". For example, you can import several projects, configure them, build some of 
	them and render some J2S applications in them in a single command line call:</para>
	
	<example><title>Perform a sequence of tasks in a single eclipse call</title>
	
	<para>1) Import extern java source folder located at /path/to/project1/src into a new eclipse project p1. 
	2) Import existing eclipse project located at /path/to/eclipseProject into a new eclipse project named p2. 3) build p2 
	4) render a j2s application at p2 project: </para>
	<programlisting>
eclipse -nosplash -application net.sf.j2s.ui.cmdlineApi \
	-cmd newProject -path /path/to/project1 -projectName p1 -sourceFolders src -outputFolder js \
	-cmd newProject -path /path/to/eclipseProject -projectName p2 \
	-cmd build -projectname p2 \
  	-cmd render -projectName p2 -mainFile /src/org/foo/Class1.java  -j2slibUrl j2slib 
  		\-template /path/to/toHtmlDocumentTemplate.vm -outputName ${mainType}.html
	</programlisting>
	</example>
	
  </section>





  

  <section>
  <title>Command Line Syntax </title>
  
  <para>Let examine a common command line use case: </para>
  
  
  
  
<programlistingco>
<areaspec>
<area id="cmdline.init" coords='1'/>
<area id="cmdline.newProject" coords='2'/>
<area id="cmdline1.setClasspath" coords='3'/>
<area id="cmdline1.setoutputFolder" coords='4'/>
<area id="cmdline1.build" coords='4'/>
</areaspec>
<programlisting>
eclipse -data /path/to/myCleanworkspace -nosplash -application net.sf.j2s.ui.cmdlineApi \
  	-cmd newProject -path /dev/workspace/proj1 -projectName proj1 \
  	-cmd setClassPath -classPath lib/lib1.jar:/abs/path/to/lib2.jar \
  	-cmd setOutputFolder -outputFolder javascript \
  	-cmd build -projectName proj1 \  	
</programlisting>
<calloutlist>
<callout arearefs="cmdline.init">
<para>

classes.
</para>
</callout>
<callout arearefs="ex.plco.ret">
<para>
This function returns a two-element list.
</para>
</callout>
<callout arearefs="ex.plco.dest">
<para>
The <emphasis>destructor</emphasis> (<function>DESTROY</function>) for
the object <literal>$b</literal> will be called automatically for this
object since there can be no other references to it outside this function.
</para>
</callout>
</calloutlist>
</programlistingco>
  
  <formalpara><title>Choose workspace</title><para>A mandatory eclipse parameter 
  	is <code>-data</code> for specifying a custom workspace to work. 
	Since J2s command line API plugin will be performing project import building and deleting, all programatically, 
	<emphasis>it is wise </emphasis>to do it in a different workspace to the default. 
	<emphasis>The user is responsible of spcifying a custom workspace, preferably an empty/new one, not used for work.</emphasis> </para>
	</formalpara>
	
	<important><formalpara><title>Custom workspace</title><para>It is highly recommended to use a custom ecipse workspace for working with
	Java2Script command line API. Remember that when you call j2s command line application (<code>-application net.sf.j2s.ui.cmdlineApi</code>)
	eclipse will be importing and </para></formalpara></important>
	
  

	
	<para>As we have seen, we will be calling eclipse executable it self, with the arguments 
	<code>"-nosplash -application net.sf.j2s.ui.cmdlineApi"</code>. The <code>-nosplash</code> argument tells
	eclipse not to show the eclipse splash screen. The <code>-application net.sf.j2s.ui.cmdlineApi</code> arguments
	tell eclipse to launch the eclipse application <code>net.sf.j2s.ui.cmdline</code> and not the normal eclipse 
	ide. This application will parse further command arguments and do the all the job (for example invoking the j2s builder) without 
	showing any GUI element at all.</para>
		
	</section>
		
		
	<section>
		<title>Commands</title>
		<para></para>
		
		<section><title>command newProject</title>		
			<para>Creates a new empty eclipse project or imports an existing eclipse project. 
			Basically, the user pass a path and a name. If path points to an existing eclipse project, 
			the project will be imported to the workspace. Otherwise, a new eclipse project will 
			be created with path as a location. </para>
			
			<formalpara><title>-path</title><para>path to project directory location</para></formalpara>
			
			<formalpara><title>-projectName</title><para>desired name for referring to this project 
			later, like in a build command. </para></formalpara>
			
			<formalpara><title>-sourceFolders</title><para>In the case of non eclipse project locations, 
			user must indicate sourcefolder names of the new project. Remember that you can specify several sourceoflders separating its paths with ':' character. 
			For example, if /path/to/project/ 
			where the project location and	/path/to/project/src the source folder (the folder with java code), then the user should enter 
			-cmd newProject -path "/path/to/project/src" -projectName proj1 -sourceFolders src</para></formalpara>
		
		
			<example><title>Importing an existing eclipse project located at /dev/workspace/proj1 into the workspace with project name "proj1".</title>
			
	<programlisting>eclipse -data /path/to/myCleanworkspace -nosplash -application net.sf.j2s.ui.cmdlineApi\
 	-cmd newProject -path /dev/workspace/proj1 -projectName proj1</programlisting>
	  	
			</example>
			
			<example><title>Creating a new project from existing location that contains java sourcefolders but is not an eclipse project.</title>
			<para>Suppose you jave your java sources in the folder /dev/proj1/src. /dev/proj1 has nothing to do with eclipse projects, it only contains .java files. 
			 into the workspace with project name "proj1".</para>
			<programlisting>eclipse -data /path/to/myCleanworkspace -nosplash -application net.sf.j2s.ui.cmdlineApi\
	  	-cmd newProject -path /dev/proj1 -projectName proj1 -sourceFolders src</programlisting>
	  	
			</example>
  	
		</section>
		
		
	
		
		<section><title>Command build</title>
			<para>Build an eclipse project Java2Script project using Java2Script incremental builder. Parameters: </para>
			
			<formalpara><title>-projectName</title><para>Name of the target project.  </para></formalpara>
			
<!--			<formalpara><title>-path</title><para>the location of eclipse project to import and then build. -->
<!--			</para></formalpara>-->
			
			<formalpara><title>-problemsLog</title><para>dump build errors to a file</para></formalpara>
			
			
			<para>Example: </para>
	<programlisting>eclipse -data /path/to/myCleanworkspace -nosplash -application net.sf.j2s.ui.cmdlineApi\
-cmd newProject -path /dev/workspace/proj1 -projectName proj1
...
-cmd build -projectName proj1 -problemsLog "buildErrorLog.txt"</programlisting>
		</section>
		
		
		
		<section><title>Command render</title>
			<para>Renders a Java2Script application according to a Java2Script Application Template. </para>
			
			<formalpara><title>-path</title><para>Indicates the location of the target project. 
			This will import and build the project.	</para></formalpara>
			
			<formalpara><title>-projectName</title><para>Indicates the name of the target project. 
			If you have previously imported the project	you can use -projectName for reference it, instead having to re-import and re-build.
			</para></formalpara>
			
			<formalpara><title>-mainFile</title><para>the path of java file which main's method will be executed including sourcefolder. 
			Something like -mainFile /src/org/foo/Class1.java 
			</para></formalpara>			
			
			<formalpara><title>-template</title><para>The location in filesystem of the template to be used for render the j2s application  
			</para></formalpara>
			
			<formalpara><title>-outputName</title><para>the template code that represents the output file name. For example, in velocity, somthing like ${mainType}.html
			</para></formalpara>
			
			<formalpara><title>-j2slibUrl</title><para>location of java2script library. if a relative path is passed, path will be relative to target project root path.
			</para></formalpara>
			<para>Example: </para>
<programlisting>eclipse -data /path/to/myCleanworkspace -nosplash -application net.sf.j2s.ui.cmdlineApi\
  	-cmd render -projectName proj1 -mainFile /src/org/foo/Class1.java  -j2slibUrl path/to/j2slib\
			-template /path/to/j2sTemplate.vm -outputName ${mainType}.html</programlisting>
			
		</section>
		
		
		
		<section><title>Command setSourceFolders</title>		
			<para>Sets the source folders of a project. Sourcefolders must be inside project path 
			and must be indicated relatively. Remember to separate sourcefolder path 
			with ':' character. Example -cmd setSourceFolders -projectName proj1 -sourceFolders src1:subFolder1/src2</para>
			
			<formalpara><title>-projectName</title><para>the name of the project to set output folder to</para></formalpara>
			
			<formalpara><title>-sourceFolders</title><para>source folders relative paths relative to project root folder, separated by ":"</para></formalpara>
		
			<example><title>Setting the output folder to a previously created project. Do this before a build command.</title>
			<programlisting>eclipse -data /path/to/myCleanworkspace -nosplash -application net.sf.j2s.ui.cmdlineApi\
			...
 	-cmd setSourceFolders -projectName proj1 -sourceFolders src1:subFolder1/src2</programlisting>
	  	
			</example>
  	
		</section>
		
		
			
		<section><title>Command setOutputFolder</title>		
			<para>Sets the output folder for a project. 
			The output folder is where all .class and .js generatead files are located. "bin" is the default output folder for new projects.</para>
			
			<formalpara><title>-projectName</title><para>the name of the project to set output folder to</para></formalpara>
			
			<formalpara><title>-outputFolder</title><para>a folder path relative to project location. For example, for a project imported
			from location /path/to/project, setting "-outputFolder bin2" will put all generated .js file in /path/to/project/bin2 folder </para></formalpara>
		
		
			<example><title>Setting the output folder to a previously created project. Do this before a build command.</title>
			<programlisting>eclipse -data /path/to/myCleanworkspace -nosplash -application net.sf.j2s.ui.cmdlineApi\
			...
	  	-cmd setOutputFolder -projectName proj1 -outputFolder bin2</programlisting>
	  	
			</example>
  	
		</section>
		

		<section><title>Command setClassPath</title>		
			<para>Sets the java classpath of a project. Remember to separate classpath entries with ':' character. You can reference both folders and jar files. </para>
			
			<formalpara><title>-projectName</title><para>the name of the project to set output folder to</para></formalpara>
			
			<formalpara><title>-classPath</title><para>a list of classpath entries separated by ':'. You can enter .jar and folders containing .class. Path casn be absolute or relative to project root.
			from location /path/to/project, setting "-outputFolder bin2" will put all generated .js file in /path/to/project/bin2 folder </para></formalpara>
		
		
			<example><title>Setting the classpath of a previously created project named 'proj1' output folder to a previously created project.</title>
			<programlisting>eclipse -data /path/to/myCleanworkspace -nosplash -application net.sf.j2s.ui.cmdlineApi\
	  	-cmd setClassPath -projectName proj1 -classPath /absolute/path/to/lib1.jar:relative/lib/lib2.jar:/path/to/classes/</programlisting>
	  	
			</example>
  	
		</section>
		
	</section>
	
	
	
	

  <section>
  <title>Quick usage examples:</title>
 
  
  <para>import 2 projects, proj1 and proj2 from filesystem. Do not build them: </para>
  <programlisting>
eclipse -data /path/to/myCleanworkspace -nosplash -application net.sf.j2s.ui.cmdlineApi\
  	-cmd newProject -path /dev/workspace/proj1 -projectName proj1\
  	-cmd newProject -path /dev/workspace/proj2 -projectName proj2
  </programlisting>
  
  <para>build previously imported proj1 and proj2 projects:</para>
  <programlisting>
eclipse -data /path/to/myCleanworkspace -nosplash -application net.sf.j2s.ui.cmdlineApi\
  	-cmd build -projectName proj1 \
  	-cmd build -projectName proj2
  </programlisting>
  
  <para>import and build 2 projects from project root path, one after another:</para>
  <programlisting>
eclipse -data /path/to/myCleanworkspace -nosplash -application net.sf.j2s.ui.cmdlineApi\
	-cmd build -path /dev/workspace/proj1\
	-cmd build -path /dev/workspace/proj2
  </programlisting>
  
  <para>. Import and build a J2s project, then render a Java2Script application on that project 
  	using a velocity template : </para>
  <programlisting>
eclipse -data /path/to/myCleanworkspace -nosplash -application net.sf.j2s.ui.cmdlineApi\
	-cmd build -path /dev/workspace/proj1 -projectName proj1\
	-cmd render -projectName proj1 -mainFile /src/org/foo/Class1.java -j2slibUrl path/to/j2slib\
		-template /path/to/j2sTemplate.vm -outputName ${mainType}.html	
  </programlisting>
  			
  
  <para>Import proj1 and proj2, build proj1, and render foo.bar.Class1 of proj1  </para>
  <programlisting>
eclipse -data /path/to/myCleanworkspace -nosplash -application net.sf.j2s.ui.cmdlineApi\
  	-cmd newProject -path /dev/workspace/proj1 -projectName proj1\
  	-cmd newProject -path /dev/workspace/proj2 -projectName proj2\
  	-cmd build -projectName proj1\
  	-cmd render -projectName proj1 -mainFile /src/org/foo/Class1.java  -j2slibUrl path/to/j2slib\
  		-template /path/to/toHtmlDocumentTemplate.vm -outputName ${mainType}.html	
  </programlisting>  
  
  </section>
  
  
  
  
	
	<section><title>About the sollution</title>
	<para>This section try to explain how the Java2Script command line support was implemented. </para>
	<para>We use eclipse<code>org.eclipse.core.runtime.applications</code> extension point for defining a new eclipse 
	application that will be launched instead of the normal eclipse ide application if the user specify
	the <code>-application</code> eclipse command line parameter.  </para>
	
	<formalpara><title>Description for 
	eclipse <code>org.eclipse.core.runtime.applications</code> extension point:</title>
		<para><quote>
	Description:
Platform runtime supports plug-ins which would like to declare main entry points. That is, programs which would like to run using the platform runtime but yet control all aspects of execution can declare themselves as an application. Declared applications can be run directly from the main platform launcher by specifying the -application argument where the parameter is the id of an extension supplied to the applications extension point described here. This application is instantiated and run by the platform. Platform clients can also use the platform to lookup and run multiple applications.
	</quote></para></formalpara>

	<para>so basically, our plugin act as an eclipse application that will parse further command line arguments, and
	import, build, delete existing Java2Script projects. This is the extension code in plugin.xml:
 </para>
	
	<programlisting>
&lt;extension
   id="net.sf.j2s.ui.cmdlineApi"
   name="net.sf.j2s.ui.cmdlineApi"
   point="org.eclipse.core.runtime.applications">
   &lt;application
         cardinality="singleton-global"
         thread="main"
         visible="true">
      &lt;run
            class="net.sf.j2s.ui.cmdline.Application">
      &lt;/run>
   &lt;/application>
&lt;/extension>
	</programlisting>
	
	
	<para>Other important thing is to understand how to import, build, etc a project programatically. 
	For importing a project:</para>	
	
	<programlisting>
/**
 * import an existing eclipse project by location 
 */
public static IProject importProject(String projectPath) 
	throws CoreException, FileNotFoundException {
	IPath projectDotProjectFile = new Path(projectPath+ "/.project");
       IProjectDescription projectDescription =
       	ResourcesPlugin.getWorkspace().loadProjectDescription(projectDotProjectFile);
       IProject project = ResourcesPlugin.getWorkspace().getRoot().
           getProject(projectDescription.getName());
       JavaCapabilityConfigurationPage.createProject(project, projectDescription
           .getLocationURI(), null);
	return project;
}
</programlisting>

<para>For building a project: </para>
<programlisting>
/**
 * build the eclipse project. Note: use appendJ2sBuilderTo before for giving j2s builder 
 * support for the project
 */
public static void build(IProject project) throws CoreException {
	project.touch(null);
	ResourcesPlugin.getWorkspace().getRoot().refreshLocal(IResource.DEPTH_INFINITE, null);
	project.build(IncrementalProjectBuilder.CLEAN_BUILD, null);
}
</programlisting>

<para>As build() javadoc says, for building a a project with Java2Script Java to JavaScript builder
first we must add J2S builder to the project. For doing this, first of all, in plugin.xml we must 
register the Java2Script builder using <code>org.eclipse.core.resources.builders</code> eclipse 
extension point:
</para>

<programlisting>
   &lt;extension
         id="java2scriptbuilder"
         name="Java2Script Builder"
         point="org.eclipse.core.resources.builders">
      &lt;builder>
         &lt;run
               class="net.sf.j2s.core.builder.Java2ScriptBuilder">
         &lt;/run>
      &lt;/builder>
   &lt;/extension>
</programlisting>
	
	<para>And following, the method for adding J2S builder to a eclipse project so when the project 
	is built, J2S Builder will translate java code to javascript: </para>
	<programlisting>
public static void appendJ2sBuilderTo(IProject project) throws CoreException {
	// find j2s builder
	final String BUILDER_ID = "net.sf.j2s.core.builder.Java2ScriptBuilder";
	IProjectDescription desc = project.getDescription();
	ICommand[] commands = desc.getBuildSpec();
	boolean found = false;

	for (int j = 0; j &lt; commands.length; ++j) {
		if (commands[j].getBuilderName().equals(BUILDER_ID)) {
			found = true;
			break;
		}
	}
	if (!found) {
		// add builder to project
		ICommand command = desc.newCommand();
		command.setBuilderName(BUILDER_ID);
		ICommand[] newCommands = new ICommand[commands.length + 1];

		// Add it before other builders.
		System.arraycopy(commands, 0, newCommands, 1, commands.length);
		newCommands[0] = command;
		desc.setBuildSpec(newCommands);
		project.setDescription(desc, null);
	}
}
	</programlisting>
	
	
	<para>Last, for rendering a J2S application usgin the velocity j2s template contribution, we use:</para>
	
	<programlisting>
public static void renderJ2SApp(IProject project, String mainType,
		String j2slibUrl, String templatePath, String outputName) throws Exception {		
			
	ILaunchManager manager = DebugPlugin.getDefault().getLaunchManager();
	ILaunchConfigurationType type = manager.getLaunchConfigurationType("net.sf.j2s.ui.launching.j2sApplication");//IJavaLaunchConfigurationConstants.ID_JAVA_APPLICATION);
	ILaunchConfigurationWorkingCopy wc = type.newInstance(null, "j2sCmdLineApiLaunchConfig"+getUnique());
	
	//set config attrs 		
	wc.setAttribute(IJavaLaunchConfigurationConstants.ATTR_PROJECT_NAME, project.getName());
	wc.setAttribute(IJavaLaunchConfigurationConstants.ATTR_MAIN_TYPE_NAME, mainType);
	
	wc.setAttribute(IJ2SLauchingConfiguration.APPLY_TEMPLATE, true);
	String templateCode = Utils.inputStreamAsString(new FileInputStream(templatePath));
	wc.setAttribute(IJ2SLauchingConfiguration.VELOCITY_CODE, templateCode);		
	wc.setAttribute(IJ2SLauchingConfiguration.USE_GLOBAL_ALAA_URL, true);
	wc.setAttribute(IJ2SLauchingConfiguration.GLOBAL_J2SLIB_URL, j2slibUrl);		
	wc.setAttribute(IJ2SLauchingConfiguration.OUTPUT_FILE_NAME, outputName);		
	
	ILaunchConfiguration config = wc.doSave();
	
	Application.debug("j2s app "+project.getLocation()+" - maintype: "+mainType+" - rendered!");
	
	J2STemplateContext ct = new J2STemplateContext(config);
	
	ct.useGlobalJ2slibUrl=true;
	ct.globalJ2slibUrl=j2slibUrl;
	ct.outputFileCode=outputName;
	ct.templateCode=Utils.inputStreamAsString(new FileInputStream(templatePath));		

	J2SAppLauncherTemplateContributor templateContributor = TemplateContributionUtil.getInstance().getCurrentTemplateContribution();
	templateContributor.launchJ2SApp(ct);		
}
	</programlisting>
	</section>
  
  
  
<section><title>Ant</title>
<para>this explains how to use j2s java to javascript translator with ant using ant tasks defined on src folder src-ant/</para>
<para>TODO</para>
</section>
    
<section><title>TODO</title>
<para>import a non j2s java eclipse project and enable j2s builder on it</para>
</section>

<section><title>debug - working examples</title>
<para>Render: 
<programlisting>
./eclipse -clean -nosplash -data "/home/sebastian/desarrollo/workspaceTest2" -application net.sf.j2s.ui.cmdlineApi -cmd render -path "/home/sebastian/desarrollo/sgurin_workspace/j2stest" -mainType org.s.d.M1 -outputName "\${mainType}.html" -j2slibUrl "../yui3/j2slib" -template "/home/sebastian/desarrollo/j2s_3.6_workspace/net.sf.j2s.ui.template.velocity/src/net/sf/j2s/ui/launching/template/velocity/templates/simpleHtmlDocument.vm"
</programlisting>
</para>
 <para>The following are 3 differents command lines. The three shows how to do the same thing: import and build a J2S project and the render a java main 
 type with a certain template file:</para>
<programlisting>
# 1) command - 1) render (autoatically do import and build)
eclipse -clean -nosplash -data "/home/sebastian/desarrollo/workspaceTest2" -application net.sf.j2s.ui.cmdlineApi \
-cmd build -path "/home/sebastian/desarrollo/sgurin_workspace/j2stest" -projectName j2stest \
-cmd render -projectName j2stest -mainType org.s.d.M1 -outputName "\${mainType}.html" -j2slibUrl "../yui3/j2slib" \
-template "/home/sebastian/desarrollo/j2s_3.6_workspace/net.sf.j2s.ui.template.velocity/src/net/sf/j2s/ui/launching/template/velocity/templates/simpleHtmlDocument.vm"

# 2 commands: 1) import and build 2)render
eclipse -clean -nosplash -data "/home/sebastian/desarrollo/workspaceTest2" -application net.sf.j2s.ui.cmdlineApi \
-cmd build -path "/home/sebastian/desarrollo/sgurin_workspace/j2stest" -projectName j2stest \
-cmd render -mainType org.s.d.M1 -projectName j2stest -outputName "\${mainType}.html" -j2slibUrl "../yui3/j2slib" -template "/home/sebastian/desarrollo/j2s_3.6_workspace/net.sf.j2s.ui.template.velocity/src/net/sf/j2s/ui/launching/template/velocity/templates/simpleHtmlDocument.vm"

# 3 commands 1) import, 2) build, 3) render
eclipse -clean -nosplash -data "/home/sebastian/desarrollo/workspaceTest2" -application net.sf.j2s.ui.cmdlineApi \
-cmd newProject -path "/home/sebastian/desarrollo/sgurin_workspace/j2stest" -projectName j2stest \
-cmd build -projectName j2stest \
-cmd render -mainType org.s.d.M1 -projectName j2stest -outputName "\${mainType}.html" -j2slibUrl "../yui3/j2slib" -template "/home/sebastian/desarrollo/j2s_3.6_workspace/net.sf.j2s.ui.template.velocity/src/net/sf/j2s/ui/launching/template/velocity/templates/simpleHtmlDocument.vm"

</programlisting>
</section>

 <!-- bibliography -->
 
 <section><title>Reference</title>
<para></para>

<bibliography>
<title>Bibliography</title>
<para></para>

<!-- 
<bibliodiv><title>Websites</title>
<biblioentry>
  <abbrev>j2s docs</abbrev>
  <biblioset >
    <title>Java2script Website documentation</title>
    <publisher>
      <publishername>Java2script</publishername>
    </publisher>
    <issn> </issn>
    <editor><firstname>Renjian</firstname><surname>Zhou</surname></editor>
  </biblioset>
</biblioentry>

</bibliodiv>
 -->
</bibliography>

</section>

</article>
